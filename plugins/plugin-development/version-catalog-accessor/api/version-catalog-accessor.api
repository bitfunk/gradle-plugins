public abstract interface class eu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorContract {
	public static final field Companion Leu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorContract$Companion;
	public static final field EXTENSION_NAME Ljava/lang/String;
	public static final field TASK_NAME_COPY_SOURCE Ljava/lang/String;
	public static final field TASK_NAME_GENERATE Ljava/lang/String;
	public static final field TASK_NAME_GENERATE_SOURCE Ljava/lang/String;
}

public final class eu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorContract$Companion {
	public static final field EXTENSION_NAME Ljava/lang/String;
	public static final field TASK_NAME_COPY_SOURCE Ljava/lang/String;
	public static final field TASK_NAME_GENERATE Ljava/lang/String;
	public static final field TASK_NAME_GENERATE_SOURCE Ljava/lang/String;
}

public abstract interface class eu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorContract$Extension {
	public abstract fun getCatalogNames ()Lorg/gradle/api/provider/ListProperty;
	public abstract fun getCatalogSourceFolder ()Lorg/gradle/api/provider/Property;
	public abstract fun getPackageName ()Lorg/gradle/api/provider/Property;
}

public abstract interface class eu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorContract$Plugin {
	public abstract fun addExtension (Lorg/gradle/api/Project;)Leu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorContract$Extension;
	public abstract fun addGeneratorTask (Lorg/gradle/api/Project;)V
	public abstract fun addSourceCopyTask (Lorg/gradle/api/Project;)V
	public abstract fun addSourceGeneratorTask (Lorg/gradle/api/Project;Leu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorContract$Extension;)Leu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorSourceGeneratorTask;
	public abstract fun configureCodeCoverage (Lorg/gradle/api/Project;)V
	public abstract fun configureSourceSet (Lorg/gradle/api/Project;)V
}

public abstract interface class eu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorContract$Task {
}

public abstract interface class eu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorContract$Task$CopySource {
	public abstract fun copySource ()V
}

public abstract interface class eu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorContract$Task$Generator {
	public abstract fun generate ()V
}

public final class eu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorPlugin : eu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorContract$Plugin, org/gradle/api/Plugin {
	public fun <init> ()V
	public fun addExtension (Lorg/gradle/api/Project;)Leu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorContract$Extension;
	public fun addGeneratorTask (Lorg/gradle/api/Project;)V
	public fun addSourceCopyTask (Lorg/gradle/api/Project;)V
	public fun addSourceGeneratorTask (Lorg/gradle/api/Project;Leu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorContract$Extension;)Leu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorSourceGeneratorTask;
	public synthetic fun apply (Ljava/lang/Object;)V
	public fun apply (Lorg/gradle/api/Project;)V
	public fun configureCodeCoverage (Lorg/gradle/api/Project;)V
	public fun configureSourceSet (Lorg/gradle/api/Project;)V
}

public abstract interface class eu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorPluginExtension : eu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorContract$Extension {
}

public abstract class eu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorSourceCopyTask : org/gradle/api/DefaultTask, eu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorContract$Task$CopySource {
	public fun <init> ()V
	public fun copySource ()V
}

public abstract class eu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorSourceGeneratorTask : org/gradle/api/DefaultTask, eu/bitfunk/gradle/plugin/development/version/catalog/accessor/VersionCatalogAccessorContract$Task$Generator {
	public fun <init> ()V
	public fun generate ()V
	public abstract fun getCatalogNames ()Lorg/gradle/api/provider/ListProperty;
	public abstract fun getCatalogSourceFolder ()Lorg/gradle/api/provider/Property;
	public abstract fun getPackageName ()Lorg/gradle/api/provider/Property;
}

