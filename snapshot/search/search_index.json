{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bitfunk Gradle Plugins \u00b6 A Collection of Gradle plugins to simplify and unify project development. About the project \u00b6 Collection of Gradle plugins used across multiple projects. They add opinionated configuration for other plugins or new functionality. Plugins \u00b6 Quality \u00b6 Quality - a collection of all quality plugins Code Analysis - a source code analysis plugin Formatter - a source code formatter plugin applying bitfunk code style Report - a quality report plugin using sonarqube Tool \u00b6 Composite Delegator - a plugin that delegates gradle tasks execution to included builds Publish - a publish plugin for maven publications Versioning - a versioning plugin using git tags Plugin development \u00b6 Gradle Plugin Convention - a convention plugin for Gradle plugin development to ease configuration VersionCatalog Accessor - a version catalog accessor for Gradle plugin development Getting started \u00b6 You could use individual plugins or the all-plugins collection. Check the usage of each Gradle plugin by reading the plugin documentation . Requirements \u00b6 Gradle 7.2+ Java 11 Installation \u00b6 Add to your project root build.gradle/build.gradle.kts file to download from GitHub Packages : buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/bitfunk/gradle-plugins\" ) credentials { username = project . findProperty ( \"gpr.user\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_USERNAME\" ) password = project . findProperty ( \"gpr.key\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_TOKEN\" ) } } } } and plugins { id ( \"eu.bitfunk.gradle.plugins\" ) } Usage \u00b6 Apply the plugins of your choice to your project. For details refer to the plugins overview . Roadmap \u00b6 This project is work in progress. We are working on adding more functionality, guidelines, documentation and other improvements. See the open issues for a list of proposed improvements and known issues. Changelog \u00b6 All notable changes to this project will be documented in the changelog . Versioning \u00b6 We use Semantic Versioning as a guideline for our versioning. Contributing \u00b6 You want to help or share a proposal? You have a specific problem? Report a bug or request a feature . You want to fix or change code? Read the Code of Conduct and contributing guide . Releasing \u00b6 See releasing . Copyright and license \u00b6 Copyright \u00a9 2022 Wolf-Martell Montw\u00e9. Please refer to the ISC License for more information.","title":"Home"},{"location":"#bitfunk-gradle-plugins","text":"A Collection of Gradle plugins to simplify and unify project development.","title":"Bitfunk Gradle Plugins"},{"location":"#about-the-project","text":"Collection of Gradle plugins used across multiple projects. They add opinionated configuration for other plugins or new functionality.","title":"About the project"},{"location":"#plugins","text":"","title":"Plugins"},{"location":"#quality","text":"Quality - a collection of all quality plugins Code Analysis - a source code analysis plugin Formatter - a source code formatter plugin applying bitfunk code style Report - a quality report plugin using sonarqube","title":"Quality"},{"location":"#tool","text":"Composite Delegator - a plugin that delegates gradle tasks execution to included builds Publish - a publish plugin for maven publications Versioning - a versioning plugin using git tags","title":"Tool"},{"location":"#plugin-development","text":"Gradle Plugin Convention - a convention plugin for Gradle plugin development to ease configuration VersionCatalog Accessor - a version catalog accessor for Gradle plugin development","title":"Plugin development"},{"location":"#getting-started","text":"You could use individual plugins or the all-plugins collection. Check the usage of each Gradle plugin by reading the plugin documentation .","title":"Getting started"},{"location":"#requirements","text":"Gradle 7.2+ Java 11","title":"Requirements"},{"location":"#installation","text":"Add to your project root build.gradle/build.gradle.kts file to download from GitHub Packages : buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/bitfunk/gradle-plugins\" ) credentials { username = project . findProperty ( \"gpr.user\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_USERNAME\" ) password = project . findProperty ( \"gpr.key\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_TOKEN\" ) } } } } and plugins { id ( \"eu.bitfunk.gradle.plugins\" ) }","title":"Installation"},{"location":"#usage","text":"Apply the plugins of your choice to your project. For details refer to the plugins overview .","title":"Usage"},{"location":"#roadmap","text":"This project is work in progress. We are working on adding more functionality, guidelines, documentation and other improvements. See the open issues for a list of proposed improvements and known issues.","title":"Roadmap"},{"location":"#changelog","text":"All notable changes to this project will be documented in the changelog .","title":"Changelog"},{"location":"#versioning","text":"We use Semantic Versioning as a guideline for our versioning.","title":"Versioning"},{"location":"#contributing","text":"You want to help or share a proposal? You have a specific problem? Report a bug or request a feature . You want to fix or change code? Read the Code of Conduct and contributing guide .","title":"Contributing"},{"location":"#releasing","text":"See releasing .","title":"Releasing"},{"location":"#copyright-and-license","text":"Copyright \u00a9 2022 Wolf-Martell Montw\u00e9. Please refer to the ISC License for more information.","title":"Copyright and license"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning . Unreleased \u00b6 See changeset 0.1.0 \u00b6 Initial release Added \u00b6 Add initial project Add VersionCatalogAccessor - a version catalog accessor for Gradle plugin development Add Gradle Plugin Convention - for Gradle plugin development Add Formatter Plugin - using Spotless and ktlint Add GradleWrapper validation GitHub Action Add Sonarcloud analysis as part of the pull-request validation to enable coverage reports Add CodeAnalysis Plugin - using Detekt Add Versioning Plugin - a versioning plugin using git tags Add Report Plugin - a quality report plugin using sonarqube Add Quality Plugin - a collection of all quality plugins Add Code of Conduct Add Publish Plugin - a publish plugin for maven dependencies Add Composite Delegator Plugin - a plugin that delegates gradle tasks execution to included builds Add maven central publishing to Gradle Plugin Convention Fixed \u00b6 Versioning: cleaned version wrong for feature versions Bumped \u00b6 Sonarqube Gradle plugin 3.4.0.2513 -> 3.5.0.2730","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"See changeset","title":"Unreleased"},{"location":"changelog/#010","text":"Initial release","title":"0.1.0"},{"location":"changelog/#added","text":"Add initial project Add VersionCatalogAccessor - a version catalog accessor for Gradle plugin development Add Gradle Plugin Convention - for Gradle plugin development Add Formatter Plugin - using Spotless and ktlint Add GradleWrapper validation GitHub Action Add Sonarcloud analysis as part of the pull-request validation to enable coverage reports Add CodeAnalysis Plugin - using Detekt Add Versioning Plugin - a versioning plugin using git tags Add Report Plugin - a quality report plugin using sonarqube Add Quality Plugin - a collection of all quality plugins Add Code of Conduct Add Publish Plugin - a publish plugin for maven dependencies Add Composite Delegator Plugin - a plugin that delegates gradle tasks execution to included builds Add maven central publishing to Gradle Plugin Convention","title":"Added"},{"location":"changelog/#fixed","text":"Versioning: cleaned version wrong for feature versions","title":"Fixed"},{"location":"changelog/#bumped","text":"Sonarqube Gradle plugin 3.4.0.2513 -> 3.5.0.2730","title":"Bumped"},{"location":"license/","text":"ISC License Copyright \u00a9 2019-2022 Wolf-Martell Montw\u00e9 (bitfunk) Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","title":"License"},{"location":"develop/badges/","text":"Badges \u00b6 How To Create Badges \u00b6 We use Shields.io to generate Badges. Please use the badge links section to document and update currently used badges. Open the links and download the svg files and place them in the projects assets/images folder or use curl instead. Download Badges \u00b6 Simply use curl to download badges by providing the url and filename , that starts with badge . curl \"link\" -s -o badge-filename Badge Links \u00b6 Latest release: curl \"https://img.shields.io/badge/Release-0.1.0-blueviolet.svg?style=flat\" -s -o badge-release-latest.svg License: curl \"https://img.shields.io/badge/License-ISC-lightgrey.svg?style=flat\" -s -o badge-license.svg License \u00b6 Shields is licensed under Creative Commons Zero v1.0 Universal (as of 2022-02-23)","title":"Badges"},{"location":"develop/badges/#badges","text":"","title":"Badges"},{"location":"develop/badges/#how-to-create-badges","text":"We use Shields.io to generate Badges. Please use the badge links section to document and update currently used badges. Open the links and download the svg files and place them in the projects assets/images folder or use curl instead.","title":"How To Create Badges"},{"location":"develop/badges/#download-badges","text":"Simply use curl to download badges by providing the url and filename , that starts with badge . curl \"link\" -s -o badge-filename","title":"Download Badges"},{"location":"develop/badges/#badge-links","text":"Latest release: curl \"https://img.shields.io/badge/Release-0.1.0-blueviolet.svg?style=flat\" -s -o badge-release-latest.svg License: curl \"https://img.shields.io/badge/License-ISC-lightgrey.svg?style=flat\" -s -o badge-license.svg","title":"Badge Links"},{"location":"develop/badges/#license","text":"Shields is licensed under Creative Commons Zero v1.0 Universal (as of 2022-02-23)","title":"License"},{"location":"develop/codeOfConduct/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body, size, disability, ethnicity, class, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior should be reported. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available here .","title":"Code of Conduct"},{"location":"develop/codeOfConduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"develop/codeOfConduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body, size, disability, ethnicity, class, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"develop/codeOfConduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"develop/codeOfConduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"develop/codeOfConduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"develop/codeOfConduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior should be reported. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"develop/codeOfConduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available here .","title":"Attribution"},{"location":"develop/contributing/","text":"Contributing \u00b6 When contributing to this project, this document should help you get started. Code of Conduct \u00b6 This project adheres to the Contributor Covenant Code of Conduct . By participating, you are expected to uphold this code. Issues \u00b6 We use GitHub Issues to track bugs and enhancements, please feel free to open issues for: Questions help us to improve the user experience Ideas are a great source for contributions Problems show where this project is lacking If you're reporting a problem, please help us by providing as much information as possible. Ideally, that includes a description or small example how to reproduce the problem. Contribute code \u00b6 Develop \u00b6 Create a branch according to the following rules, work on your changes and create a pull-request. main must be always in releasable state. Branch \u00b6 Every change has to branch of from main and use this branch naming convention: feature/{type_of_change}-{short_description} or with ticket id feature/{ticket_id}/{type_of_change}-{short_description} Type of change \u00b6 added for new features or functionality changed for changes in existing features or functionality deprecated for soon-to-be removed features removed for removed features or functionality fixed for any bug fixes security in case of vulnerabilities bumped for dependency updates Examples: feature/ISSUE-456/added-awesome-hashing-algorithm feature/added-awesome-hashing-algorithm feature/removed-not-so-awesome-algorithm feature/fixed-algorithm-corner-case feature/bumped-lib-to-1.3.0 Pull request \u00b6 Pull requests are a great way to improve the project. But please, discuss your contribution with us before making changes. If you contribute, you have: made clear which problem you're trying to solve followed following rules Create pull request \u00b6 Please use our title pattern: [{issue id}] {type of change} {short description} : Optional: Add issue id in brackets if you have any, otherwise leave it out. type of change e.g Added, Changed, ... short description of your change Example: Added awesome hashing algorithm [Issue-156] Changed thumbnail generation Pull requests must fill the provided template. Put N/A when a paragraph cannot be filled. Labels should be used (enhancement,bugfix, help wanted etc...) to categorise your contribution. Code review \u00b6 We will review your contribution and check following criteria: Functional and fitting the project Code style and naming conventions followed Test written and passing Continuous Integration build passing Cross platform testing done for all supported platforms Documentation updated Changelog updated Dependencies using other licenses \u00b6 Contributing code and introducing dependencies into the repository from other projects that use one of the following licenses is allowed. MIT ISC Apache 2.0 Any other contribution needs to be signed off by the project owners.","title":"Contributing"},{"location":"develop/contributing/#contributing","text":"When contributing to this project, this document should help you get started.","title":"Contributing"},{"location":"develop/contributing/#code-of-conduct","text":"This project adheres to the Contributor Covenant Code of Conduct . By participating, you are expected to uphold this code.","title":"Code of Conduct"},{"location":"develop/contributing/#issues","text":"We use GitHub Issues to track bugs and enhancements, please feel free to open issues for: Questions help us to improve the user experience Ideas are a great source for contributions Problems show where this project is lacking If you're reporting a problem, please help us by providing as much information as possible. Ideally, that includes a description or small example how to reproduce the problem.","title":"Issues"},{"location":"develop/contributing/#contribute-code","text":"","title":"Contribute code"},{"location":"develop/contributing/#develop","text":"Create a branch according to the following rules, work on your changes and create a pull-request. main must be always in releasable state.","title":"Develop"},{"location":"develop/contributing/#branch","text":"Every change has to branch of from main and use this branch naming convention: feature/{type_of_change}-{short_description} or with ticket id feature/{ticket_id}/{type_of_change}-{short_description}","title":"Branch"},{"location":"develop/contributing/#type-of-change","text":"added for new features or functionality changed for changes in existing features or functionality deprecated for soon-to-be removed features removed for removed features or functionality fixed for any bug fixes security in case of vulnerabilities bumped for dependency updates Examples: feature/ISSUE-456/added-awesome-hashing-algorithm feature/added-awesome-hashing-algorithm feature/removed-not-so-awesome-algorithm feature/fixed-algorithm-corner-case feature/bumped-lib-to-1.3.0","title":"Type of change"},{"location":"develop/contributing/#pull-request","text":"Pull requests are a great way to improve the project. But please, discuss your contribution with us before making changes. If you contribute, you have: made clear which problem you're trying to solve followed following rules","title":"Pull request"},{"location":"develop/contributing/#create-pull-request","text":"Please use our title pattern: [{issue id}] {type of change} {short description} : Optional: Add issue id in brackets if you have any, otherwise leave it out. type of change e.g Added, Changed, ... short description of your change Example: Added awesome hashing algorithm [Issue-156] Changed thumbnail generation Pull requests must fill the provided template. Put N/A when a paragraph cannot be filled. Labels should be used (enhancement,bugfix, help wanted etc...) to categorise your contribution.","title":"Create pull request"},{"location":"develop/contributing/#code-review","text":"We will review your contribution and check following criteria: Functional and fitting the project Code style and naming conventions followed Test written and passing Continuous Integration build passing Cross platform testing done for all supported platforms Documentation updated Changelog updated","title":"Code review"},{"location":"develop/contributing/#dependencies-using-other-licenses","text":"Contributing code and introducing dependencies into the repository from other projects that use one of the following licenses is allowed. MIT ISC Apache 2.0 Any other contribution needs to be signed off by the project owners.","title":"Dependencies using other licenses"},{"location":"develop/releasing/","text":"Releasing \u00b6 Releases are automatically created from added tags using GitHub Actions. A tag needs to be in the form of v{major}.{minor}.{patch} . Release preparation \u00b6 Create a release branch of from main branch with this pattern: release/{major}.{minor}/prepare-{major}.{minor}.{patch} Update CHANGELOG.md by creating a new Unreleased section and change current unreleased to release version Update the latest release badge Release \u00b6 For a release, we use GitHub releases: Create a new release Set the tag Set the title Add a description in form of a changelog Publish when ready","title":"Releasing"},{"location":"develop/releasing/#releasing","text":"Releases are automatically created from added tags using GitHub Actions. A tag needs to be in the form of v{major}.{minor}.{patch} .","title":"Releasing"},{"location":"develop/releasing/#release-preparation","text":"Create a release branch of from main branch with this pattern: release/{major}.{minor}/prepare-{major}.{minor}.{patch} Update CHANGELOG.md by creating a new Unreleased section and change current unreleased to release version Update the latest release badge","title":"Release preparation"},{"location":"develop/releasing/#release","text":"For a release, we use GitHub releases: Create a new release Set the tag Set the title Add a description in form of a changelog Publish when ready","title":"Release"},{"location":"pluginDevelopment/","text":"Overview - Plugin development \u00b6 Plugins and tools that support developing Gradle plugins. Plugins \u00b6 GradlePlugin Convention - a convention plugin for Gradle plugin development to ease configuration VersionCatalogAccessor - a version catalog accessor for Gradle plugin development","title":"Overview"},{"location":"pluginDevelopment/#overview-plugin-development","text":"Plugins and tools that support developing Gradle plugins.","title":"Overview - Plugin development"},{"location":"pluginDevelopment/#plugins","text":"GradlePlugin Convention - a convention plugin for Gradle plugin development to ease configuration VersionCatalogAccessor - a version catalog accessor for Gradle plugin development","title":"Plugins"},{"location":"pluginDevelopment/gradlePluginConvention/","text":"Gradle Plugin Convention \u00b6 The plugin applies configuration for Gradle plugin development to ease configuration effort. It sets Java 11 support, default dependencies, tests and coverage settings. It also enables explicit API mode for Kotlin . Requirements \u00b6 Gradle 7.2+ Installation \u00b6 Add to your project root build.gradle/build.gradle.kts file to download from GitHub packages: buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/bitfunk/gradle-plugins\" ) credentials { username = project . findProperty ( \"gpr.user\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_USERNAME\" ) password = project . findProperty ( \"gpr.key\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_TOKEN\" ) } } } } and plugins { id ( \"eu.bitfunk.gradle.plugin.development.convention\" ) }","title":"GradlePluginConvention"},{"location":"pluginDevelopment/gradlePluginConvention/#gradle-plugin-convention","text":"The plugin applies configuration for Gradle plugin development to ease configuration effort. It sets Java 11 support, default dependencies, tests and coverage settings. It also enables explicit API mode for Kotlin .","title":"Gradle Plugin Convention"},{"location":"pluginDevelopment/gradlePluginConvention/#requirements","text":"Gradle 7.2+","title":"Requirements"},{"location":"pluginDevelopment/gradlePluginConvention/#installation","text":"Add to your project root build.gradle/build.gradle.kts file to download from GitHub packages: buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/bitfunk/gradle-plugins\" ) credentials { username = project . findProperty ( \"gpr.user\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_USERNAME\" ) password = project . findProperty ( \"gpr.key\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_TOKEN\" ) } } } } and plugins { id ( \"eu.bitfunk.gradle.plugin.development.convention\" ) }","title":"Installation"},{"location":"pluginDevelopment/versionCatalogAccessor/","text":"VersionCatalogAccessor \u00b6 This plugin generates an accessor to expose the version catalog (toml) content to Gradle plugins. This allows plugins to reuse an already available version catalog in it's own implementation similarly to typesafe accessors. Requirements \u00b6 Gradle 7.2+ Can only be applied to Gradle plugins with the java-gradle-plugin available. Kotlin DSL A version catalog available and enabled (default: libs.versions.toml ) Installation \u00b6 Add to your project root build.gradle/build.gradle.kts file to download from GitHub packages: buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/bitfunk/gradle-plugins\" ) credentials { username = project . findProperty ( \"gpr.user\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_USERNAME\" ) password = project . findProperty ( \"gpr.key\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_TOKEN\" ) } } } } and plugins { id ( \"eu.bitfunk.gradle.plugin.development.version.catalog.accessor\" ) } The plugin works with a default version catalog setup, but could be configured to your needs: catalogSourceFolder : relative path to the version catalog toml files. Default: gradle/ catalogNames : names of the catalogs for whom to create an accessor. Default: listOf(\"libs\") packageName : package used for the generated accessor. Default: empty versionCatalogHelper { catalogSourceFolder . set ( \"\" ) catalogNames . set ( listOf ( \"libs\" , \"deps\" )) packageName . set ( \"com.example\" ) } Usage \u00b6 Generate the version catalog accessor. When your version catalog is named libs it will be LibsVersionCatalogAccessor . ./gradlew generateVersionCatalogAccessor When the accessor is generated, it is added to your project sourceSet and available to be used within your plugin. Import it and use it to access versions, libraries, bundles and plugins from your version catalog. val libs = LibsVersionCatalogAccessor ( project ) config { libVersion = libs . versions . example . get () libVersion = libs . versions . example . getStatic () } dependencies { implementation ( libs . library . get ()) } If you're consuming a version like LibsVersionCatalogAccessor(project).versions.exmaple.get() , it will be a dynamic version. This version needs to be defined in any consuming project. Alternatively you could use LibsVersionCatalogAccessor(project).versions.exmaple.getStatic() for a fixed version bound to your local version catalog.","title":"VersionCatalogAccessor"},{"location":"pluginDevelopment/versionCatalogAccessor/#versioncatalogaccessor","text":"This plugin generates an accessor to expose the version catalog (toml) content to Gradle plugins. This allows plugins to reuse an already available version catalog in it's own implementation similarly to typesafe accessors.","title":"VersionCatalogAccessor"},{"location":"pluginDevelopment/versionCatalogAccessor/#requirements","text":"Gradle 7.2+ Can only be applied to Gradle plugins with the java-gradle-plugin available. Kotlin DSL A version catalog available and enabled (default: libs.versions.toml )","title":"Requirements"},{"location":"pluginDevelopment/versionCatalogAccessor/#installation","text":"Add to your project root build.gradle/build.gradle.kts file to download from GitHub packages: buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/bitfunk/gradle-plugins\" ) credentials { username = project . findProperty ( \"gpr.user\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_USERNAME\" ) password = project . findProperty ( \"gpr.key\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_TOKEN\" ) } } } } and plugins { id ( \"eu.bitfunk.gradle.plugin.development.version.catalog.accessor\" ) } The plugin works with a default version catalog setup, but could be configured to your needs: catalogSourceFolder : relative path to the version catalog toml files. Default: gradle/ catalogNames : names of the catalogs for whom to create an accessor. Default: listOf(\"libs\") packageName : package used for the generated accessor. Default: empty versionCatalogHelper { catalogSourceFolder . set ( \"\" ) catalogNames . set ( listOf ( \"libs\" , \"deps\" )) packageName . set ( \"com.example\" ) }","title":"Installation"},{"location":"pluginDevelopment/versionCatalogAccessor/#usage","text":"Generate the version catalog accessor. When your version catalog is named libs it will be LibsVersionCatalogAccessor . ./gradlew generateVersionCatalogAccessor When the accessor is generated, it is added to your project sourceSet and available to be used within your plugin. Import it and use it to access versions, libraries, bundles and plugins from your version catalog. val libs = LibsVersionCatalogAccessor ( project ) config { libVersion = libs . versions . example . get () libVersion = libs . versions . example . getStatic () } dependencies { implementation ( libs . library . get ()) } If you're consuming a version like LibsVersionCatalogAccessor(project).versions.exmaple.get() , it will be a dynamic version. This version needs to be defined in any consuming project. Alternatively you could use LibsVersionCatalogAccessor(project).versions.exmaple.getStatic() for a fixed version bound to your local version catalog.","title":"Usage"},{"location":"plugins/","text":"Overview \u00b6 Overview of Gradle plugins used across multiple projects. Plugins \u00b6 Quality \u00b6 All Quality - a collection of all quality plugins Code Analysis - a source code analysis Formatter - a source code formatter applying bitfunk code style Report - a quality report plugin using sonarqube Tool \u00b6 Composite Delegator - a plugin that delegates gradle tasks execution to included builds Publish - publish plugin for maven publications Versioning - a versioning plugin using git tags","title":"Overview"},{"location":"plugins/#overview","text":"Overview of Gradle plugins used across multiple projects.","title":"Overview"},{"location":"plugins/#plugins","text":"","title":"Plugins"},{"location":"plugins/#quality","text":"All Quality - a collection of all quality plugins Code Analysis - a source code analysis Formatter - a source code formatter applying bitfunk code style Report - a quality report plugin using sonarqube","title":"Quality"},{"location":"plugins/#tool","text":"Composite Delegator - a plugin that delegates gradle tasks execution to included builds Publish - publish plugin for maven publications Versioning - a versioning plugin using git tags","title":"Tool"},{"location":"plugins/quality/","text":"Quality Plugin \u00b6 The plugin is a collection of all quality plugins. Features \u00b6 Quick access to all quality plugins in one: Code Analysis - a source code analysis Formatter - a source code formatter applying bitfunk code style Report - a quality report plugin using sonarqube Installation \u00b6 Add to your project root build.gradle/build.gradle.kts file to download from GitHub packages: buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/bitfunk/gradle-plugins\" ) credentials { username = project . findProperty ( \"gpr.user\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_USERNAME\" ) password = project . findProperty ( \"gpr.key\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_TOKEN\" ) } } } } and plugins { id ( \"eu.bitfunk.gradle.plugin.quality\" ) } Usage \u00b6 Read the corresponding quality plugin documentation.","title":"All"},{"location":"plugins/quality/#quality-plugin","text":"The plugin is a collection of all quality plugins.","title":"Quality Plugin"},{"location":"plugins/quality/#features","text":"Quick access to all quality plugins in one: Code Analysis - a source code analysis Formatter - a source code formatter applying bitfunk code style Report - a quality report plugin using sonarqube","title":"Features"},{"location":"plugins/quality/#installation","text":"Add to your project root build.gradle/build.gradle.kts file to download from GitHub packages: buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/bitfunk/gradle-plugins\" ) credentials { username = project . findProperty ( \"gpr.user\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_USERNAME\" ) password = project . findProperty ( \"gpr.key\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_TOKEN\" ) } } } } and plugins { id ( \"eu.bitfunk.gradle.plugin.quality\" ) }","title":"Installation"},{"location":"plugins/quality/#usage","text":"Read the corresponding quality plugin documentation.","title":"Usage"},{"location":"plugins/quality/code-analysis/","text":"Code Analysis Plugin \u00b6 The plugin helps to analyse code of your project and warns about issues. It makes use of the detekt plugin . Features \u00b6 As this plugin wraps detekt, it offers the same features for project configuration. Installation \u00b6 Add to your project root build.gradle/build.gradle.kts file to download from GitHub packages: buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/bitfunk/gradle-plugins\" ) credentials { username = project . findProperty ( \"gpr.user\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_USERNAME\" ) password = project . findProperty ( \"gpr.key\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_TOKEN\" ) } } } } and plugins { id ( \"eu.bitfunk.gradle.plugin.quality.code.analysis\" ) } Usage \u00b6 To check source code: ./gradlew detekt For applying initial configuration ./gradlew detektGenerateConfig For setting a baseline ./gradlew detektBaseline","title":"Code Analysis"},{"location":"plugins/quality/code-analysis/#code-analysis-plugin","text":"The plugin helps to analyse code of your project and warns about issues. It makes use of the detekt plugin .","title":"Code Analysis Plugin"},{"location":"plugins/quality/code-analysis/#features","text":"As this plugin wraps detekt, it offers the same features for project configuration.","title":"Features"},{"location":"plugins/quality/code-analysis/#installation","text":"Add to your project root build.gradle/build.gradle.kts file to download from GitHub packages: buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/bitfunk/gradle-plugins\" ) credentials { username = project . findProperty ( \"gpr.user\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_USERNAME\" ) password = project . findProperty ( \"gpr.key\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_TOKEN\" ) } } } } and plugins { id ( \"eu.bitfunk.gradle.plugin.quality.code.analysis\" ) }","title":"Installation"},{"location":"plugins/quality/code-analysis/#usage","text":"To check source code: ./gradlew detekt For applying initial configuration ./gradlew detektGenerateConfig For setting a baseline ./gradlew detektBaseline","title":"Usage"},{"location":"plugins/quality/formatter/","text":"Formatter Plugin \u00b6 The plugin helps to format source code of your project and warns about issues. It makes use of the spotless plugin and applies bitfunk flavoured default configuration. Features \u00b6 As this plugin wraps spotless, it offers the same features with bitfunk project configuration. For kotlin it's using ktlint and Markdown is using prettier . Supported source files: Kotlin (.kt) Kotlin Gradle (.kts) Markdown (.md) Installation \u00b6 Add to your project root build.gradle/build.gradle.kts file to download from GitHub packages: buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/bitfunk/gradle-plugins\" ) credentials { username = project . findProperty ( \"gpr.user\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_USERNAME\" ) password = project . findProperty ( \"gpr.key\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_TOKEN\" ) } } } } and plugins { id ( \"eu.bitfunk.gradle.plugin.quality.formatter\" ) } Usage \u00b6 To check source code formatting ./gradlew spotlessCheck For applying source code formatting ./gradlew spotlessApply","title":"Formatter"},{"location":"plugins/quality/formatter/#formatter-plugin","text":"The plugin helps to format source code of your project and warns about issues. It makes use of the spotless plugin and applies bitfunk flavoured default configuration.","title":"Formatter Plugin"},{"location":"plugins/quality/formatter/#features","text":"As this plugin wraps spotless, it offers the same features with bitfunk project configuration. For kotlin it's using ktlint and Markdown is using prettier . Supported source files: Kotlin (.kt) Kotlin Gradle (.kts) Markdown (.md)","title":"Features"},{"location":"plugins/quality/formatter/#installation","text":"Add to your project root build.gradle/build.gradle.kts file to download from GitHub packages: buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/bitfunk/gradle-plugins\" ) credentials { username = project . findProperty ( \"gpr.user\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_USERNAME\" ) password = project . findProperty ( \"gpr.key\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_TOKEN\" ) } } } } and plugins { id ( \"eu.bitfunk.gradle.plugin.quality.formatter\" ) }","title":"Installation"},{"location":"plugins/quality/formatter/#usage","text":"To check source code formatting ./gradlew spotlessCheck For applying source code formatting ./gradlew spotlessApply","title":"Usage"},{"location":"plugins/quality/report/","text":"Report Plugin \u00b6 The plugin configures sonarqube scanner to report code metrics to sonarcloud.io . It makes use of the SonarScanner for Gradle and applies default configuration. Features \u00b6 This plugin wraps the sonar scanner Gradle plugin and applies some configuration. It also collects project sourceFiles for the report. This works for subprojects and included builds. It also copies code coverage reports to the right location for the scanner plugin. Installation \u00b6 Add to your project root build.gradle/build.gradle.kts file to download from GitHub packages: buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/bitfunk/gradle-plugins\" ) credentials { username = project . findProperty ( \"gpr.user\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_USERNAME\" ) password = project . findProperty ( \"gpr.key\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_TOKEN\" ) } } } } and plugins { id ( \"eu.bitfunk.gradle.plugin.quality.report\" ) } The plugin needs some configuration: sonarProjectKey : Sonar key used to identify the project. sonarOrganization : Sonar organisation name the project belongs to. coverageReportSourceDirs : List of directories in which the jacoco coverage report XML file could be found. Default: buildDir/reports/jacoco/testCodeCoverageReport reportConfig { sonarProjectKey . set ( \"sonar project key\" ) sonarOrganization . set ( \"sonar organization name\" ) coverageReportSourceDirs . set ( listOf ( \"buildDir/reports/jacoco/testCodeCoverageReport\" )) // Optional } Usage \u00b6 To run the report generation and upload to sonarcloud.io: ./gradlew sonarqube You need to provide a SONAR_TOKEN from sonarcloud.io to be able to upload reports.","title":"Report"},{"location":"plugins/quality/report/#report-plugin","text":"The plugin configures sonarqube scanner to report code metrics to sonarcloud.io . It makes use of the SonarScanner for Gradle and applies default configuration.","title":"Report Plugin"},{"location":"plugins/quality/report/#features","text":"This plugin wraps the sonar scanner Gradle plugin and applies some configuration. It also collects project sourceFiles for the report. This works for subprojects and included builds. It also copies code coverage reports to the right location for the scanner plugin.","title":"Features"},{"location":"plugins/quality/report/#installation","text":"Add to your project root build.gradle/build.gradle.kts file to download from GitHub packages: buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/bitfunk/gradle-plugins\" ) credentials { username = project . findProperty ( \"gpr.user\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_USERNAME\" ) password = project . findProperty ( \"gpr.key\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_TOKEN\" ) } } } } and plugins { id ( \"eu.bitfunk.gradle.plugin.quality.report\" ) } The plugin needs some configuration: sonarProjectKey : Sonar key used to identify the project. sonarOrganization : Sonar organisation name the project belongs to. coverageReportSourceDirs : List of directories in which the jacoco coverage report XML file could be found. Default: buildDir/reports/jacoco/testCodeCoverageReport reportConfig { sonarProjectKey . set ( \"sonar project key\" ) sonarOrganization . set ( \"sonar organization name\" ) coverageReportSourceDirs . set ( listOf ( \"buildDir/reports/jacoco/testCodeCoverageReport\" )) // Optional }","title":"Installation"},{"location":"plugins/quality/report/#usage","text":"To run the report generation and upload to sonarcloud.io: ./gradlew sonarqube You need to provide a SONAR_TOKEN from sonarcloud.io to be able to upload reports.","title":"Usage"},{"location":"plugins/tool/compositeDelegator/","text":"Composite Delegator Plugin \u00b6 A plugin that delegates gradle task execution to included builds. Features \u00b6 standard tasks are already added: assemble , build , check , test additional task could be configured Installation \u00b6 Add to your project root build.gradle/build.gradle.kts file to download from GitHub packages: buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/bitfunk/gradle-plugins\" ) credentials { username = project . findProperty ( \"gpr.user\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_USERNAME\" ) password = project . findProperty ( \"gpr.key\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_TOKEN\" ) } } } } and plugins { id ( \"eu.bitfunk.gradle.plugin.tool.composite.delegator\" ) } The plugin could delegate additional tasks: additionalTasks : List of task names that additionally should be delegated to included builds compositeDelegator { additionalTasks . set ( listOf ( \"task1\" , \"task2\" )) } Usage \u00b6 Ensure that your desired task is registered and call: ./gradlew exampleTask","title":"Composite Delegator"},{"location":"plugins/tool/compositeDelegator/#composite-delegator-plugin","text":"A plugin that delegates gradle task execution to included builds.","title":"Composite Delegator Plugin"},{"location":"plugins/tool/compositeDelegator/#features","text":"standard tasks are already added: assemble , build , check , test additional task could be configured","title":"Features"},{"location":"plugins/tool/compositeDelegator/#installation","text":"Add to your project root build.gradle/build.gradle.kts file to download from GitHub packages: buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/bitfunk/gradle-plugins\" ) credentials { username = project . findProperty ( \"gpr.user\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_USERNAME\" ) password = project . findProperty ( \"gpr.key\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_TOKEN\" ) } } } } and plugins { id ( \"eu.bitfunk.gradle.plugin.tool.composite.delegator\" ) } The plugin could delegate additional tasks: additionalTasks : List of task names that additionally should be delegated to included builds compositeDelegator { additionalTasks . set ( listOf ( \"task1\" , \"task2\" )) }","title":"Installation"},{"location":"plugins/tool/compositeDelegator/#usage","text":"Ensure that your desired task is registered and call: ./gradlew exampleTask","title":"Usage"},{"location":"plugins/tool/publish/","text":"Publish Plugin \u00b6 A publish plugin for maven dependencies. Features \u00b6 TODO Installation \u00b6 Add to your project root build.gradle/build.gradle.kts file to download from GitHub packages: buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/bitfunk/gradle-plugins\" ) credentials { username = project . findProperty ( \"gpr.user\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_USERNAME\" ) password = project . findProperty ( \"gpr.key\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_TOKEN\" ) } } } } and plugins { id ( \"eu.bitfunk.gradle.plugin.tool.publish\" ) } Usage \u00b6 TODO","title":"Publish"},{"location":"plugins/tool/publish/#publish-plugin","text":"A publish plugin for maven dependencies.","title":"Publish Plugin"},{"location":"plugins/tool/publish/#features","text":"TODO","title":"Features"},{"location":"plugins/tool/publish/#installation","text":"Add to your project root build.gradle/build.gradle.kts file to download from GitHub packages: buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/bitfunk/gradle-plugins\" ) credentials { username = project . findProperty ( \"gpr.user\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_USERNAME\" ) password = project . findProperty ( \"gpr.key\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_TOKEN\" ) } } } } and plugins { id ( \"eu.bitfunk.gradle.plugin.tool.publish\" ) }","title":"Installation"},{"location":"plugins/tool/publish/#usage","text":"TODO","title":"Usage"},{"location":"plugins/tool/versioning/","text":"Versioning Plugin \u00b6 A plugin to generate semantic version information and apply it to the project based on git tags. It makes use of the gradle git plugin . Features \u00b6 As this plugin wraps git-version, it offers the same features for versioning. Additionally it adds: versionCode - version code for Android based on semantic versioning (MMmmPP) featureVersionCode - version code for Android based on timesstamps (MMddHHmm) versionInfo - prints all information about the current version Installation \u00b6 Add to your project root build.gradle/build.gradle.kts file to download from GitHub packages: buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/bitfunk/gradle-plugins\" ) credentials { username = project . findProperty ( \"gpr.user\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_USERNAME\" ) password = project . findProperty ( \"gpr.key\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_TOKEN\" ) } } } } and plugins { id ( \"eu.bitfunk.gradle.plugin.tool.versioning\" ) } Usage \u00b6 To print current version information: ./gradlew versionInfo To access the version information, use this project extensions: version() - version as String versionCleaned - version where -SNAPSHOT got removed versionCode() - versionCode as Int versionCodeFeature() - versionCodeFeature as Int","title":"Version"},{"location":"plugins/tool/versioning/#versioning-plugin","text":"A plugin to generate semantic version information and apply it to the project based on git tags. It makes use of the gradle git plugin .","title":"Versioning Plugin"},{"location":"plugins/tool/versioning/#features","text":"As this plugin wraps git-version, it offers the same features for versioning. Additionally it adds: versionCode - version code for Android based on semantic versioning (MMmmPP) featureVersionCode - version code for Android based on timesstamps (MMddHHmm) versionInfo - prints all information about the current version","title":"Features"},{"location":"plugins/tool/versioning/#installation","text":"Add to your project root build.gradle/build.gradle.kts file to download from GitHub packages: buildscript { repositories { maven { url = uri ( \"https://maven.pkg.github.com/bitfunk/gradle-plugins\" ) credentials { username = project . findProperty ( \"gpr.user\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_USERNAME\" ) password = project . findProperty ( \"gpr.key\" ) as String? ?: System . getenv ( \"PACKAGE_REGISTRY_TOKEN\" ) } } } } and plugins { id ( \"eu.bitfunk.gradle.plugin.tool.versioning\" ) }","title":"Installation"},{"location":"plugins/tool/versioning/#usage","text":"To print current version information: ./gradlew versionInfo To access the version information, use this project extensions: version() - version as String versionCleaned - version where -SNAPSHOT got removed versionCode() - versionCode as Int versionCodeFeature() - versionCodeFeature as Int","title":"Usage"}]}