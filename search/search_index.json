{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bitfunk Gradle Plugins \u00b6 About the project \u00b6 A Collection of Gradle plugins to simplify and unify project development used across multiple bitfunk projects. They add opinionated configuration for other plugins or new functionality. Plugins \u00b6 Plugins and tools that support developing software and add functionality to Gradle. Quality \u00b6 Quality Collection - a collection of all quality plugins Code Analysis - a source code analysis plugin Formatter - a source code formatter plugin applying bitfunk code style Report - a quality report plugin using sonarqube Tool \u00b6 CompositeDelegator - a plugin that delegates gradle tasks execution to included builds Publish - a publish plugin for maven publications GitVersion - a plugin to derive version information from git tags Versioning - a versioning plugin using git tags Plugin development \u00b6 Plugins and tools that support developing Gradle plugins. Plugin \u00b6 GradlePluginConvention - a convention plugin for Gradle plugin development to ease configuration VersionCatalogAccessor - a version catalog accessor for Gradle plugin development Test \u00b6 GradleTestUtil - Test util to ease Gradle plugin testing Getting started \u00b6 You could use individual plugins or the all-plugins collection. Check the usage of each Gradle plugin by reading the plugin documentation . Requirements \u00b6 Gradle 7.2+ Java 11 Installation \u00b6 The dependencies are distributed through Maven Central . In case you want to use a SNAPSHOT version, add the following to your project root build.gradle/build.gradle.kts file: buildscript { repositories { maven ( \"https://s01.oss.sonatype.org/content/repositories/snapshots/\" ) } } Usage \u00b6 Apply the plugins of your choice to your project. For details refer to the plugins overview . Roadmap \u00b6 This project is work in progress. We are working on adding more functionality, guidelines, documentation and other improvements. See the open issues for a list of proposed improvements and known issues. Changelog \u00b6 All notable changes to this project will be documented in the changelog . Versioning \u00b6 We use Semantic Versioning as a guideline for our versioning. Contributing \u00b6 You want to help or share a proposal? You have a specific problem? Report a bug or request a feature . You want to fix or change code? Read the Code of Conduct and contributing guide . Releasing \u00b6 See release guide . Copyright and license \u00b6 Copyright \u00a9 2022 Wolf-Martell Montw\u00e9. Please refer to the ISC License for more information.","title":"Home"},{"location":"#bitfunk-gradle-plugins","text":"","title":"Bitfunk Gradle Plugins"},{"location":"#about-the-project","text":"A Collection of Gradle plugins to simplify and unify project development used across multiple bitfunk projects. They add opinionated configuration for other plugins or new functionality.","title":"About the project"},{"location":"#plugins","text":"Plugins and tools that support developing software and add functionality to Gradle.","title":"Plugins"},{"location":"#quality","text":"Quality Collection - a collection of all quality plugins Code Analysis - a source code analysis plugin Formatter - a source code formatter plugin applying bitfunk code style Report - a quality report plugin using sonarqube","title":"Quality"},{"location":"#tool","text":"CompositeDelegator - a plugin that delegates gradle tasks execution to included builds Publish - a publish plugin for maven publications GitVersion - a plugin to derive version information from git tags Versioning - a versioning plugin using git tags","title":"Tool"},{"location":"#plugin-development","text":"Plugins and tools that support developing Gradle plugins.","title":"Plugin development"},{"location":"#plugin","text":"GradlePluginConvention - a convention plugin for Gradle plugin development to ease configuration VersionCatalogAccessor - a version catalog accessor for Gradle plugin development","title":"Plugin"},{"location":"#test","text":"GradleTestUtil - Test util to ease Gradle plugin testing","title":"Test"},{"location":"#getting-started","text":"You could use individual plugins or the all-plugins collection. Check the usage of each Gradle plugin by reading the plugin documentation .","title":"Getting started"},{"location":"#requirements","text":"Gradle 7.2+ Java 11","title":"Requirements"},{"location":"#installation","text":"The dependencies are distributed through Maven Central . In case you want to use a SNAPSHOT version, add the following to your project root build.gradle/build.gradle.kts file: buildscript { repositories { maven ( \"https://s01.oss.sonatype.org/content/repositories/snapshots/\" ) } }","title":"Installation"},{"location":"#usage","text":"Apply the plugins of your choice to your project. For details refer to the plugins overview .","title":"Usage"},{"location":"#roadmap","text":"This project is work in progress. We are working on adding more functionality, guidelines, documentation and other improvements. See the open issues for a list of proposed improvements and known issues.","title":"Roadmap"},{"location":"#changelog","text":"All notable changes to this project will be documented in the changelog .","title":"Changelog"},{"location":"#versioning","text":"We use Semantic Versioning as a guideline for our versioning.","title":"Versioning"},{"location":"#contributing","text":"You want to help or share a proposal? You have a specific problem? Report a bug or request a feature . You want to fix or change code? Read the Code of Conduct and contributing guide .","title":"Contributing"},{"location":"#releasing","text":"See release guide .","title":"Releasing"},{"location":"#copyright-and-license","text":"Copyright \u00a9 2022 Wolf-Martell Montw\u00e9. Please refer to the ISC License for more information.","title":"Copyright and license"},{"location":"CHANGELOG/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning . Changelogs for every plugin are listed below and for this project could be found in the project section at the end. Plugin \u00b6 Quality \u00b6 QualityCollection CodeAnalysis Report Formatter Tool \u00b6 CompositeDelegator Publish GitVersion Versioning Gradle plugin development \u00b6 Plugin \u00b6 GradlePluginConvention VersionCatalogAccessor Test \u00b6 GradleTestUtil Project \u00b6 All project changes below. Unreleased \u00b6 See changeset 0.2.0 \u00b6 See changeset Changed \u00b6 Change documentation from multi version to single version Bumped \u00b6 Bitfunk Plugin Development Convention 0.1.0 -> 0.2.1 Bitfunk Quality 0.1.0 -> 0.2.0 Bitfunk Versioning 0.1.1 -> 0.2.0 Bitfunk Composite Delegator 0.1.0 -> 0.2.0 Gradle 7.5.1 -> 8.0 0.1.0 \u00b6 Added \u00b6 Add initial project Add GradleWrapper validation GitHub Action Add Sonarcloud analysis as part of the pull-request validation to enable coverage reports Add Code of Conduct Add test report uploader","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning . Changelogs for every plugin are listed below and for this project could be found in the project section at the end.","title":"Changelog"},{"location":"CHANGELOG/#plugin","text":"","title":"Plugin"},{"location":"CHANGELOG/#quality","text":"QualityCollection CodeAnalysis Report Formatter","title":"Quality"},{"location":"CHANGELOG/#tool","text":"CompositeDelegator Publish GitVersion Versioning","title":"Tool"},{"location":"CHANGELOG/#gradle-plugin-development","text":"","title":"Gradle plugin development"},{"location":"CHANGELOG/#plugin_1","text":"GradlePluginConvention VersionCatalogAccessor","title":"Plugin"},{"location":"CHANGELOG/#test","text":"GradleTestUtil","title":"Test"},{"location":"CHANGELOG/#project","text":"All project changes below.","title":"Project"},{"location":"CHANGELOG/#unreleased","text":"See changeset","title":"Unreleased"},{"location":"CHANGELOG/#020","text":"See changeset","title":"0.2.0"},{"location":"CHANGELOG/#changed","text":"Change documentation from multi version to single version","title":"Changed"},{"location":"CHANGELOG/#bumped","text":"Bitfunk Plugin Development Convention 0.1.0 -> 0.2.1 Bitfunk Quality 0.1.0 -> 0.2.0 Bitfunk Versioning 0.1.1 -> 0.2.0 Bitfunk Composite Delegator 0.1.0 -> 0.2.0 Gradle 7.5.1 -> 8.0","title":"Bumped"},{"location":"CHANGELOG/#010","text":"","title":"0.1.0"},{"location":"CHANGELOG/#added","text":"Add initial project Add GradleWrapper validation GitHub Action Add Sonarcloud analysis as part of the pull-request validation to enable coverage reports Add Code of Conduct Add test report uploader","title":"Added"},{"location":"CODE_OF_CONDUCT/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body, size, disability, ethnicity, class, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior should be reported. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available here .","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"CODE_OF_CONDUCT/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body, size, disability, ethnicity, class, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"CODE_OF_CONDUCT/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"CODE_OF_CONDUCT/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"CODE_OF_CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior should be reported. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"CODE_OF_CONDUCT/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available here .","title":"Attribution"},{"location":"CONTRIBUTING/","text":"Contributing \u00b6 When contributing to this project, this document should help you get started. Code of Conduct \u00b6 This project adheres to the Contributor Covenant Code of Conduct . By participating, you are expected to uphold this code. Issues \u00b6 We use GitHub Issues to track bugs and enhancements, please feel free to open issues for: Questions help us to improve the user experience Ideas are a great source for contributions Problems show where this project is lacking If you're reporting a problem, please help us by providing as much information as possible. Ideally, that includes a description or small example how to reproduce the problem. Contribute code \u00b6 Develop \u00b6 Create a branch according to the following rules, work on your changes and create a pull-request. main must be always in releasable state. Create a fork Create a feature branch following naming rules below Commit your changes as small atomic changesets with focus on readability Push your feature branch Create a pull-request against this repo Branch \u00b6 Every change has to branch of from main and use this branch naming convention: feature/{type_of_change}-{short_description} or with ticket id feature/{ticket_id}/{type_of_change}-{short_description} Type of change \u00b6 added for new features or functionality changed for changes in existing features or functionality deprecated for soon-to-be removed features removed for removed features or functionality fixed for any bug fixes security in case of vulnerabilities bumped for dependency updates Examples: feature/ISSUE-456/added-awesome-hashing-algorithm feature/added-awesome-hashing-algorithm feature/removed-not-so-awesome-algorithm feature/fixed-algorithm-corner-case feature/bumped-lib-to-1.3.0 Pull request \u00b6 Pull requests are a great way to improve the project. But please, discuss your contribution with us before making changes. If you contribute, you have: made clear which problem you're trying to solve followed following rules Create pull request \u00b6 Please use our title pattern: [{issue id}] {type of change} {short description} : Optional: Add issue id in brackets if you have any, otherwise leave it out. type of change e.g Added, Changed, ... short description of your change Example: Added awesome hashing algorithm [Issue-156] Changed thumbnail generation Pull requests must fill the provided template. Put N/A when a paragraph cannot be filled. Labels should be used (enhancement,bugfix, help wanted etc...) to categorise your contribution. Code review \u00b6 We will review your contribution and check following criteria: Functional and fitting the project Code style and naming conventions followed Test written and passing Continuous Integration build passing Cross-platform testing done for all supported platforms Documentation updated Changelog updated Dependencies using other licenses \u00b6 Contributing code and introducing dependencies into the repository from other projects that use one of the following licenses is allowed. MIT ISC Apache 2.0 Any other contribution needs to be signed off by the project owners.","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"When contributing to this project, this document should help you get started.","title":"Contributing"},{"location":"CONTRIBUTING/#code-of-conduct","text":"This project adheres to the Contributor Covenant Code of Conduct . By participating, you are expected to uphold this code.","title":"Code of Conduct"},{"location":"CONTRIBUTING/#issues","text":"We use GitHub Issues to track bugs and enhancements, please feel free to open issues for: Questions help us to improve the user experience Ideas are a great source for contributions Problems show where this project is lacking If you're reporting a problem, please help us by providing as much information as possible. Ideally, that includes a description or small example how to reproduce the problem.","title":"Issues"},{"location":"CONTRIBUTING/#contribute-code","text":"","title":"Contribute code"},{"location":"CONTRIBUTING/#develop","text":"Create a branch according to the following rules, work on your changes and create a pull-request. main must be always in releasable state. Create a fork Create a feature branch following naming rules below Commit your changes as small atomic changesets with focus on readability Push your feature branch Create a pull-request against this repo","title":"Develop"},{"location":"CONTRIBUTING/#branch","text":"Every change has to branch of from main and use this branch naming convention: feature/{type_of_change}-{short_description} or with ticket id feature/{ticket_id}/{type_of_change}-{short_description}","title":"Branch"},{"location":"CONTRIBUTING/#type-of-change","text":"added for new features or functionality changed for changes in existing features or functionality deprecated for soon-to-be removed features removed for removed features or functionality fixed for any bug fixes security in case of vulnerabilities bumped for dependency updates Examples: feature/ISSUE-456/added-awesome-hashing-algorithm feature/added-awesome-hashing-algorithm feature/removed-not-so-awesome-algorithm feature/fixed-algorithm-corner-case feature/bumped-lib-to-1.3.0","title":"Type of change"},{"location":"CONTRIBUTING/#pull-request","text":"Pull requests are a great way to improve the project. But please, discuss your contribution with us before making changes. If you contribute, you have: made clear which problem you're trying to solve followed following rules","title":"Pull request"},{"location":"CONTRIBUTING/#create-pull-request","text":"Please use our title pattern: [{issue id}] {type of change} {short description} : Optional: Add issue id in brackets if you have any, otherwise leave it out. type of change e.g Added, Changed, ... short description of your change Example: Added awesome hashing algorithm [Issue-156] Changed thumbnail generation Pull requests must fill the provided template. Put N/A when a paragraph cannot be filled. Labels should be used (enhancement,bugfix, help wanted etc...) to categorise your contribution.","title":"Create pull request"},{"location":"CONTRIBUTING/#code-review","text":"We will review your contribution and check following criteria: Functional and fitting the project Code style and naming conventions followed Test written and passing Continuous Integration build passing Cross-platform testing done for all supported platforms Documentation updated Changelog updated","title":"Code review"},{"location":"CONTRIBUTING/#dependencies-using-other-licenses","text":"Contributing code and introducing dependencies into the repository from other projects that use one of the following licenses is allowed. MIT ISC Apache 2.0 Any other contribution needs to be signed off by the project owners.","title":"Dependencies using other licenses"},{"location":"LICENSE/","text":"ISC License \u00b6 Copyright \u00a9 2019-2022 Wolf-Martell Montw\u00e9 (bitfunk) Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","title":"License"},{"location":"LICENSE/#isc-license","text":"Copyright \u00a9 2019-2022 Wolf-Martell Montw\u00e9 (bitfunk) Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","title":"ISC License"},{"location":"SECURITY/","text":"Security Policy \u00b6 Supported Versions \u00b6 Versions currently being supported with security updates: Version Supported latest Reporting a Vulnerability \u00b6 Please use the GitHub Issues to report vulnerabilities. When we receive a security bug report, we will: Confirm the problem and determine the affected versions. Audit code to find any potential similar problems. Prepare fixes for all releases still under maintenance.","title":"Security Policy"},{"location":"SECURITY/#security-policy","text":"","title":"Security Policy"},{"location":"SECURITY/#supported-versions","text":"Versions currently being supported with security updates: Version Supported latest","title":"Supported Versions"},{"location":"SECURITY/#reporting-a-vulnerability","text":"Please use the GitHub Issues to report vulnerabilities. When we receive a security bug report, we will: Confirm the problem and determine the affected versions. Audit code to find any potential similar problems. Prepare fixes for all releases still under maintenance.","title":"Reporting a Vulnerability"},{"location":"docs/develop/RELEASING/","text":"Release guide \u00b6 Releases are automatically created from added tags using GitHub Actions. A tag needs to be in the form of v{major}.{minor}.{patch} . Release preparation \u00b6 Create a release branch of from main branch with this pattern: release/{major}.{minor}/prepare-{major}.{minor}.{patch} Update CHANGELOG.md by creating a new Unreleased section and change current unreleased to release version Update the latest release badge Release \u00b6 For a release, we use GitHub releases: Create a new release Set the tag Set the title Add a description in form of a changelog Publish when ready","title":"Releasing"},{"location":"docs/develop/RELEASING/#release-guide","text":"Releases are automatically created from added tags using GitHub Actions. A tag needs to be in the form of v{major}.{minor}.{patch} .","title":"Release guide"},{"location":"docs/develop/RELEASING/#release-preparation","text":"Create a release branch of from main branch with this pattern: release/{major}.{minor}/prepare-{major}.{minor}.{patch} Update CHANGELOG.md by creating a new Unreleased section and change current unreleased to release version Update the latest release badge","title":"Release preparation"},{"location":"docs/develop/RELEASING/#release","text":"For a release, we use GitHub releases: Create a new release Set the tag Set the title Add a description in form of a changelog Publish when ready","title":"Release"},{"location":"docs/develop/badges/","text":"Badges \u00b6 How To Create Badges \u00b6 We use Shields.io to generate Badges. Please use the badge links section to document and update currently used badges. Open the links and download the svg files and place them in the projects assets/images folder or use curl instead. Download Badges \u00b6 Simply use curl to download badges by providing the url and filename , that starts with badge . curl \"link\" -s -o badge-filename Badge Links \u00b6 Releases: \u00b6 Quality \u00b6 curl \"https://img.shields.io/badge/Quality-\u2192-orange.svg?style=flat\" -s -o ../assets/images/badge-section-quality.svg Quality collection curl \"https://img.shields.io/badge/QualityCollection-v0.2.0-orange.svg?style=flat\" -s -o ../assets/images/badge-release-quality-collection.svg Code analysis curl \"https://img.shields.io/badge/CodeAnalysis-v0.2.0-orange.svg?style=flat\" -s -o ../assets/images/badge-release-quality-code-analysis.svg Code Formatter curl \"https://img.shields.io/badge/CodeFormatter-v0.2.0-orange.svg?style=flat\" -s -o ../assets/images/badge-release-quality-code-formatter.svg Report curl \"https://img.shields.io/badge/Report-v0.2.0-orange.svg?style=flat\" -s -o ../assets/images/badge-release-quality-report.svg Tool \u00b6 curl \"https://img.shields.io/badge/Tool-\u2192-orange.svg?style=flat\" -s -o ../assets/images/badge-section-tool.svg Composite Delegator curl \"https://img.shields.io/badge/CompositeDelegator-v0.2.0-orange.svg?style=flat\" -s -o ../assets/images/badge-release-tool-composite-delegator.svg Git Version curl \"https://img.shields.io/badge/GitVersion-v0.2.0-orange.svg?style=flat\" -s -o ../assets/images/badge-release-tool-git-version.svg Publish curl \"https://img.shields.io/badge/Publish-TODO-orange.svg?style=flat\" -s -o ../assets/images/badge-release-tool-publish.svg Versioning curl \"https://img.shields.io/badge/Versioning-v0.2.0-orange.svg?style=flat\" -s -o ../assets/images/badge-release-tool-versioning.svg Plugin-development \u00b6 curl \"https://img.shields.io/badge/Plugin_Development-\u2192-orange.svg?style=flat\" -s -o ../assets/images/badge-section-plugin-development.svg Gradle plugin convention curl \"https://img.shields.io/badge/PluginConvention-v0.2.1-orange.svg?style=flat\" -s -o ../assets/images/badge-release-gradle-plugin-convention.svg Gradle test util curl \"https://img.shields.io/badge/TestUtil-v0.2.0-orange.svg?style=flat\" -s -o ../assets/images/badge-release-gradle-test-util.svg Gradle Version catalog accessor curl \"https://img.shields.io/badge/VersionCatalogAccessor-v0.2.0-orange.svg?style=flat\" -s -o ../assets/images/badge-release-gradle-version-catalog-accessor.svg Other \u00b6 License: curl \"https://img.shields.io/badge/License-ISC-lightgrey.svg?style=flat\" -s -o badge-license.svg License \u00b6 Shields is licensed under Creative Commons Zero v1.0 Universal (as of 2022-02-23)","title":"Badges"},{"location":"docs/develop/badges/#badges","text":"","title":"Badges"},{"location":"docs/develop/badges/#how-to-create-badges","text":"We use Shields.io to generate Badges. Please use the badge links section to document and update currently used badges. Open the links and download the svg files and place them in the projects assets/images folder or use curl instead.","title":"How To Create Badges"},{"location":"docs/develop/badges/#download-badges","text":"Simply use curl to download badges by providing the url and filename , that starts with badge . curl \"link\" -s -o badge-filename","title":"Download Badges"},{"location":"docs/develop/badges/#badge-links","text":"","title":"Badge Links"},{"location":"docs/develop/badges/#releases","text":"","title":"Releases:"},{"location":"docs/develop/badges/#quality","text":"curl \"https://img.shields.io/badge/Quality-\u2192-orange.svg?style=flat\" -s -o ../assets/images/badge-section-quality.svg Quality collection curl \"https://img.shields.io/badge/QualityCollection-v0.2.0-orange.svg?style=flat\" -s -o ../assets/images/badge-release-quality-collection.svg Code analysis curl \"https://img.shields.io/badge/CodeAnalysis-v0.2.0-orange.svg?style=flat\" -s -o ../assets/images/badge-release-quality-code-analysis.svg Code Formatter curl \"https://img.shields.io/badge/CodeFormatter-v0.2.0-orange.svg?style=flat\" -s -o ../assets/images/badge-release-quality-code-formatter.svg Report curl \"https://img.shields.io/badge/Report-v0.2.0-orange.svg?style=flat\" -s -o ../assets/images/badge-release-quality-report.svg","title":"Quality"},{"location":"docs/develop/badges/#tool","text":"curl \"https://img.shields.io/badge/Tool-\u2192-orange.svg?style=flat\" -s -o ../assets/images/badge-section-tool.svg Composite Delegator curl \"https://img.shields.io/badge/CompositeDelegator-v0.2.0-orange.svg?style=flat\" -s -o ../assets/images/badge-release-tool-composite-delegator.svg Git Version curl \"https://img.shields.io/badge/GitVersion-v0.2.0-orange.svg?style=flat\" -s -o ../assets/images/badge-release-tool-git-version.svg Publish curl \"https://img.shields.io/badge/Publish-TODO-orange.svg?style=flat\" -s -o ../assets/images/badge-release-tool-publish.svg Versioning curl \"https://img.shields.io/badge/Versioning-v0.2.0-orange.svg?style=flat\" -s -o ../assets/images/badge-release-tool-versioning.svg","title":"Tool"},{"location":"docs/develop/badges/#plugin-development","text":"curl \"https://img.shields.io/badge/Plugin_Development-\u2192-orange.svg?style=flat\" -s -o ../assets/images/badge-section-plugin-development.svg Gradle plugin convention curl \"https://img.shields.io/badge/PluginConvention-v0.2.1-orange.svg?style=flat\" -s -o ../assets/images/badge-release-gradle-plugin-convention.svg Gradle test util curl \"https://img.shields.io/badge/TestUtil-v0.2.0-orange.svg?style=flat\" -s -o ../assets/images/badge-release-gradle-test-util.svg Gradle Version catalog accessor curl \"https://img.shields.io/badge/VersionCatalogAccessor-v0.2.0-orange.svg?style=flat\" -s -o ../assets/images/badge-release-gradle-version-catalog-accessor.svg","title":"Plugin-development"},{"location":"docs/develop/badges/#other","text":"License: curl \"https://img.shields.io/badge/License-ISC-lightgrey.svg?style=flat\" -s -o badge-license.svg","title":"Other"},{"location":"docs/develop/badges/#license","text":"Shields is licensed under Creative Commons Zero v1.0 Universal (as of 2022-02-23)","title":"License"},{"location":"plugin-development/gradle-plugin-convention/","text":"Gradle Plugin Convention \u00b6 The plugin applies configuration for Gradle plugin development to ease configuration effort. It sets Java 11 support, default dependencies, tests and coverage settings. It also enables explicit API mode for Kotlin . Requirements \u00b6 Gradle 7.2+ Installation \u00b6 Add the following to your project module build.gradle/build.gradle.kts file: plugins { id ( \"eu.bitfunk.gradle.plugin.development.convention\" ) } The plugin configures publishing and needs to be setup: publishName : Name of the plugin publishDescription : Description of the plugin publishGitHubOrganization : GitHub organisation/account name publishGitHubRepositoryName : GitHub repository name projectConfig { publishName . set ( \"PLUGIN_NAME\" ) publishDescription . set ( \"PLUGIN_DESCRIPTION\" ) publishGitHubOrganization . set ( \"PLUGIN_GITHUB_ORG\" ) publishGitHubRepositoryName . set ( \"PLUGIN_GITHUB_REPOSITORY\" ) } Usage \u00b6 When the plugin is applied, the project is configured with JUnit5 for testing and Kotlin as development language. Just start to develop and test your GradlePlugin with minimal configuration effort.","title":"Gradle Plugin Convention"},{"location":"plugin-development/gradle-plugin-convention/#gradle-plugin-convention","text":"The plugin applies configuration for Gradle plugin development to ease configuration effort. It sets Java 11 support, default dependencies, tests and coverage settings. It also enables explicit API mode for Kotlin .","title":"Gradle Plugin Convention"},{"location":"plugin-development/gradle-plugin-convention/#requirements","text":"Gradle 7.2+","title":"Requirements"},{"location":"plugin-development/gradle-plugin-convention/#installation","text":"Add the following to your project module build.gradle/build.gradle.kts file: plugins { id ( \"eu.bitfunk.gradle.plugin.development.convention\" ) } The plugin configures publishing and needs to be setup: publishName : Name of the plugin publishDescription : Description of the plugin publishGitHubOrganization : GitHub organisation/account name publishGitHubRepositoryName : GitHub repository name projectConfig { publishName . set ( \"PLUGIN_NAME\" ) publishDescription . set ( \"PLUGIN_DESCRIPTION\" ) publishGitHubOrganization . set ( \"PLUGIN_GITHUB_ORG\" ) publishGitHubRepositoryName . set ( \"PLUGIN_GITHUB_REPOSITORY\" ) }","title":"Installation"},{"location":"plugin-development/gradle-plugin-convention/#usage","text":"When the plugin is applied, the project is configured with JUnit5 for testing and Kotlin as development language. Just start to develop and test your GradlePlugin with minimal configuration effort.","title":"Usage"},{"location":"plugin-development/gradle-plugin-convention/CHANGELOG/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning . Unreleased \u00b6 See changeset 0.2.1 \u00b6 See changeset Bumped \u00b6 Version Catalog Accessor 0.1.1 -> 0.2.0 0.2.0 \u00b6 See changeset Bumped \u00b6 Gradle 7.5.1 -> 8.0 Kotlin 1.6.21 -> 1.8.10 MockK 1.13.3 -> 1.13.4 JUnit5 5.9.1 -> 5.9.2 MavenPublish 0.22.0 -> 0.24.0 Kotlin BinaryCompatibility 0.12.1 -> 0.13.0 Kotlin Gradle DSL 2.3.3 -> 4.0.6 Gradle Test Util 0.1.1 -> 0.2.0 0.1.0 \u00b6 See changeset Bumped \u00b6 Mockk 1.13.2 -> 1.13.3 Gradle Test Util 0.1.0 -> 0.1.1 Version Catalog Accessor 0.1.0 -> 0.1.1 0.0.7 \u00b6 See changeset Added \u00b6 maven central publishing Fixed \u00b6 missing test dependency 0.0.6 \u00b6 See changeset Added \u00b6 Kotlin test dependency 0.0.5 \u00b6 Initial release Gradle Plugin Convention - for Gradle plugin development","title":"Changelog"},{"location":"plugin-development/gradle-plugin-convention/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning .","title":"Changelog"},{"location":"plugin-development/gradle-plugin-convention/CHANGELOG/#unreleased","text":"See changeset","title":"Unreleased"},{"location":"plugin-development/gradle-plugin-convention/CHANGELOG/#021","text":"See changeset","title":"0.2.1"},{"location":"plugin-development/gradle-plugin-convention/CHANGELOG/#bumped","text":"Version Catalog Accessor 0.1.1 -> 0.2.0","title":"Bumped"},{"location":"plugin-development/gradle-plugin-convention/CHANGELOG/#020","text":"See changeset","title":"0.2.0"},{"location":"plugin-development/gradle-plugin-convention/CHANGELOG/#bumped_1","text":"Gradle 7.5.1 -> 8.0 Kotlin 1.6.21 -> 1.8.10 MockK 1.13.3 -> 1.13.4 JUnit5 5.9.1 -> 5.9.2 MavenPublish 0.22.0 -> 0.24.0 Kotlin BinaryCompatibility 0.12.1 -> 0.13.0 Kotlin Gradle DSL 2.3.3 -> 4.0.6 Gradle Test Util 0.1.1 -> 0.2.0","title":"Bumped"},{"location":"plugin-development/gradle-plugin-convention/CHANGELOG/#010","text":"See changeset","title":"0.1.0"},{"location":"plugin-development/gradle-plugin-convention/CHANGELOG/#bumped_2","text":"Mockk 1.13.2 -> 1.13.3 Gradle Test Util 0.1.0 -> 0.1.1 Version Catalog Accessor 0.1.0 -> 0.1.1","title":"Bumped"},{"location":"plugin-development/gradle-plugin-convention/CHANGELOG/#007","text":"See changeset","title":"0.0.7"},{"location":"plugin-development/gradle-plugin-convention/CHANGELOG/#added","text":"maven central publishing","title":"Added"},{"location":"plugin-development/gradle-plugin-convention/CHANGELOG/#fixed","text":"missing test dependency","title":"Fixed"},{"location":"plugin-development/gradle-plugin-convention/CHANGELOG/#006","text":"See changeset","title":"0.0.6"},{"location":"plugin-development/gradle-plugin-convention/CHANGELOG/#added_1","text":"Kotlin test dependency","title":"Added"},{"location":"plugin-development/gradle-plugin-convention/CHANGELOG/#005","text":"Initial release Gradle Plugin Convention - for Gradle plugin development","title":"0.0.5"},{"location":"plugin-development/gradle-test-util/","text":"GradleTestUtil \u00b6 This collection of utils simplifies testing of Gradle plugins. Installation \u00b6 The dependency is distributed through Maven Central In case you want to use a SNAPSHOT version, add the following to your project module build.gradle/build.gradle.kts file: dependency { testImplementation ( \"eu.bitfunk.gradle.plugin.development.test:gradle-test-util:LATEST_VERSION\" ) } Usage \u00b6 Stub Gradle action \u00b6 For easier mocking of Gradle actions with MockK there are two util functions provided: stubGradleAction and stubGradleActionWithReturn . In case the Gradle DSL you're able to provide a mocked version that will be invoked to test it's usage. stubGradleAction ( publishingExtension ) { project . extensions . configure ( PublishingExtension :: class . java , it ) } and in case the action needs to return a value stubGradleActionWithReturn ( jacocoReport , returnedObject ) { taskContainer . named ( \"jacocoTestReport\" , JacocoReport :: class . java , it ) }","title":"GradleTestUtil"},{"location":"plugin-development/gradle-test-util/#gradletestutil","text":"This collection of utils simplifies testing of Gradle plugins.","title":"GradleTestUtil"},{"location":"plugin-development/gradle-test-util/#installation","text":"The dependency is distributed through Maven Central In case you want to use a SNAPSHOT version, add the following to your project module build.gradle/build.gradle.kts file: dependency { testImplementation ( \"eu.bitfunk.gradle.plugin.development.test:gradle-test-util:LATEST_VERSION\" ) }","title":"Installation"},{"location":"plugin-development/gradle-test-util/#usage","text":"","title":"Usage"},{"location":"plugin-development/gradle-test-util/#stub-gradle-action","text":"For easier mocking of Gradle actions with MockK there are two util functions provided: stubGradleAction and stubGradleActionWithReturn . In case the Gradle DSL you're able to provide a mocked version that will be invoked to test it's usage. stubGradleAction ( publishingExtension ) { project . extensions . configure ( PublishingExtension :: class . java , it ) } and in case the action needs to return a value stubGradleActionWithReturn ( jacocoReport , returnedObject ) { taskContainer . named ( \"jacocoTestReport\" , JacocoReport :: class . java , it ) }","title":"Stub Gradle action"},{"location":"plugin-development/gradle-test-util/CHANGELOG/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning . Unreleased \u00b6 See changeset 0.2.0 \u00b6 See changeset Bumped \u00b6 Gradle 7.5.1 -> 8.0 Kotlin 1.6.21 -> 1.8.10 MockK 1.13.3 -> 1.13.4 JUnit5 5.9.1 -> 5.9.2 MavenPublish 0.22.0 -> 0.24.0 Kotlin BinaryCompatibility 0.12.1 -> 0.13.0 0.1.1 \u00b6 See changeset Bumped \u00b6 Mockk 1.13.2 -> 1.13.3 0.1.0 \u00b6 Initial release Gradle Test Util - for Gradle plugin testing","title":"Changelog"},{"location":"plugin-development/gradle-test-util/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning .","title":"Changelog"},{"location":"plugin-development/gradle-test-util/CHANGELOG/#unreleased","text":"See changeset","title":"Unreleased"},{"location":"plugin-development/gradle-test-util/CHANGELOG/#020","text":"See changeset","title":"0.2.0"},{"location":"plugin-development/gradle-test-util/CHANGELOG/#bumped","text":"Gradle 7.5.1 -> 8.0 Kotlin 1.6.21 -> 1.8.10 MockK 1.13.3 -> 1.13.4 JUnit5 5.9.1 -> 5.9.2 MavenPublish 0.22.0 -> 0.24.0 Kotlin BinaryCompatibility 0.12.1 -> 0.13.0","title":"Bumped"},{"location":"plugin-development/gradle-test-util/CHANGELOG/#011","text":"See changeset","title":"0.1.1"},{"location":"plugin-development/gradle-test-util/CHANGELOG/#bumped_1","text":"Mockk 1.13.2 -> 1.13.3","title":"Bumped"},{"location":"plugin-development/gradle-test-util/CHANGELOG/#010","text":"Initial release Gradle Test Util - for Gradle plugin testing","title":"0.1.0"},{"location":"plugin-development/version-catalog-accessor/","text":"VersionCatalogAccessor \u00b6 This plugin generates an accessor to expose the version catalog (toml) content to Gradle plugins. This allows plugins to reuse an already available version catalog in it's own implementation similarly to typesafe accessors. Requirements \u00b6 Gradle 7.2+ Can only be applied to Gradle plugins with the java-gradle-plugin available. Kotlin DSL A version catalog available and enabled (default: libs.versions.toml ) Installation \u00b6 Add the following to your project module build.gradle/build.gradle.kts file: plugins { id ( \"eu.bitfunk.gradle.plugin.development.version.catalog.accessor\" ) } The plugin works with a default version catalog setup, but could be configured to your needs: catalogSourceFolder : relative path to the version catalog toml files. Default: gradle/ catalogNames : names of the catalogs for whom to create an accessor. Default: listOf(\"libs\") packageName : package used for the generated accessor. Default: empty versionCatalogHelper { catalogSourceFolder . set ( \"\" ) catalogNames . set ( listOf ( \"libs\" , \"deps\" )) packageName . set ( \"com.example\" ) } Usage \u00b6 Generate the version catalog accessor. When your version catalog is named libs it will be LibsVersionCatalogAccessor . ./gradlew generateVersionCatalogAccessor When the accessor is generated, it is added to your project sourceSet and available to be used within your plugin. Import it and use it to access versions, libraries, bundles and plugins from your version catalog. val libs = LibsVersionCatalogAccessor ( project ) config { libVersion = libs . versions . example . get () libVersion = libs . versions . example . getStatic () } dependencies { implementation ( libs . library . get ()) } If you're consuming a version like LibsVersionCatalogAccessor(project).versions.exmaple.get() , it will be a dynamic version. This version needs to be defined in any consuming project. Alternatively you could use LibsVersionCatalogAccessor(project).versions.exmaple.getStatic() for a fixed version bound to your local version catalog.","title":"VersionCatalogAccessor"},{"location":"plugin-development/version-catalog-accessor/#versioncatalogaccessor","text":"This plugin generates an accessor to expose the version catalog (toml) content to Gradle plugins. This allows plugins to reuse an already available version catalog in it's own implementation similarly to typesafe accessors.","title":"VersionCatalogAccessor"},{"location":"plugin-development/version-catalog-accessor/#requirements","text":"Gradle 7.2+ Can only be applied to Gradle plugins with the java-gradle-plugin available. Kotlin DSL A version catalog available and enabled (default: libs.versions.toml )","title":"Requirements"},{"location":"plugin-development/version-catalog-accessor/#installation","text":"Add the following to your project module build.gradle/build.gradle.kts file: plugins { id ( \"eu.bitfunk.gradle.plugin.development.version.catalog.accessor\" ) } The plugin works with a default version catalog setup, but could be configured to your needs: catalogSourceFolder : relative path to the version catalog toml files. Default: gradle/ catalogNames : names of the catalogs for whom to create an accessor. Default: listOf(\"libs\") packageName : package used for the generated accessor. Default: empty versionCatalogHelper { catalogSourceFolder . set ( \"\" ) catalogNames . set ( listOf ( \"libs\" , \"deps\" )) packageName . set ( \"com.example\" ) }","title":"Installation"},{"location":"plugin-development/version-catalog-accessor/#usage","text":"Generate the version catalog accessor. When your version catalog is named libs it will be LibsVersionCatalogAccessor . ./gradlew generateVersionCatalogAccessor When the accessor is generated, it is added to your project sourceSet and available to be used within your plugin. Import it and use it to access versions, libraries, bundles and plugins from your version catalog. val libs = LibsVersionCatalogAccessor ( project ) config { libVersion = libs . versions . example . get () libVersion = libs . versions . example . getStatic () } dependencies { implementation ( libs . library . get ()) } If you're consuming a version like LibsVersionCatalogAccessor(project).versions.exmaple.get() , it will be a dynamic version. This version needs to be defined in any consuming project. Alternatively you could use LibsVersionCatalogAccessor(project).versions.exmaple.getStatic() for a fixed version bound to your local version catalog.","title":"Usage"},{"location":"plugin-development/version-catalog-accessor/CHANGELOG/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning . Unreleased \u00b6 See changeset Bumped \u00b6 Gradle Plugin Convention 0.2.0 -> 0.2.1 0.2.0 \u00b6 See changeset Bumped \u00b6 Gradle Plugin Convention 0.0.7 -> 0.2.0 Jackson Dataformat Toml 2.14.1 -> 2.14.2 0.1.1 \u00b6 See changeset Changed \u00b6 package group name Bumped \u00b6 jacksonToml 2.14.0 -> 2.14.1 0.1.0 \u00b6 Initial release of the VersionCatalogAccessor - a version catalog accessor for Gradle plugin development","title":"Changelog"},{"location":"plugin-development/version-catalog-accessor/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning .","title":"Changelog"},{"location":"plugin-development/version-catalog-accessor/CHANGELOG/#unreleased","text":"See changeset","title":"Unreleased"},{"location":"plugin-development/version-catalog-accessor/CHANGELOG/#bumped","text":"Gradle Plugin Convention 0.2.0 -> 0.2.1","title":"Bumped"},{"location":"plugin-development/version-catalog-accessor/CHANGELOG/#020","text":"See changeset","title":"0.2.0"},{"location":"plugin-development/version-catalog-accessor/CHANGELOG/#bumped_1","text":"Gradle Plugin Convention 0.0.7 -> 0.2.0 Jackson Dataformat Toml 2.14.1 -> 2.14.2","title":"Bumped"},{"location":"plugin-development/version-catalog-accessor/CHANGELOG/#011","text":"See changeset","title":"0.1.1"},{"location":"plugin-development/version-catalog-accessor/CHANGELOG/#changed","text":"package group name","title":"Changed"},{"location":"plugin-development/version-catalog-accessor/CHANGELOG/#bumped_2","text":"jacksonToml 2.14.0 -> 2.14.1","title":"Bumped"},{"location":"plugin-development/version-catalog-accessor/CHANGELOG/#010","text":"Initial release of the VersionCatalogAccessor - a version catalog accessor for Gradle plugin development","title":"0.1.0"},{"location":"plugins/","text":"Overview \u00b6 Overview of all Gradle plugins provided by this project. Plugins \u00b6 Quality \u00b6 Quality Collection - a collection of all quality plugins Code Analysis - a source code analysis Formatter - a source code formatter applying bitfunk code style Report - a quality report plugin using sonarqube Tool \u00b6 Composite Delegator - a plugin that delegates gradle tasks execution to included builds Publish - publish plugin for maven publications GitVersion - a plugin to derive version information from git tags Versioning - a versioning plugin using git tags","title":"Overview"},{"location":"plugins/#overview","text":"Overview of all Gradle plugins provided by this project.","title":"Overview"},{"location":"plugins/#plugins","text":"","title":"Plugins"},{"location":"plugins/#quality","text":"Quality Collection - a collection of all quality plugins Code Analysis - a source code analysis Formatter - a source code formatter applying bitfunk code style Report - a quality report plugin using sonarqube","title":"Quality"},{"location":"plugins/#tool","text":"Composite Delegator - a plugin that delegates gradle tasks execution to included builds Publish - publish plugin for maven publications GitVersion - a plugin to derive version information from git tags Versioning - a versioning plugin using git tags","title":"Tool"},{"location":"plugins/quality/","text":"Quality Plugin \u00b6 This plugin is a collection of all quality plugins. Features \u00b6 Quick access to all quality plugins in one: Code Analysis - source code analysis Formatter - source code formatter applying bitfunk code style Report - quality report plugin using sonarqube Installation \u00b6 Add the following to your project root build.gradle/build.gradle.kts file: plugins { id ( \"eu.bitfunk.gradle.plugin.quality\" ) } Usage \u00b6 Read the corresponding quality plugin documentation listed under features.","title":"Quality Plugin"},{"location":"plugins/quality/#quality-plugin","text":"This plugin is a collection of all quality plugins.","title":"Quality Plugin"},{"location":"plugins/quality/#features","text":"Quick access to all quality plugins in one: Code Analysis - source code analysis Formatter - source code formatter applying bitfunk code style Report - quality report plugin using sonarqube","title":"Features"},{"location":"plugins/quality/#installation","text":"Add the following to your project root build.gradle/build.gradle.kts file: plugins { id ( \"eu.bitfunk.gradle.plugin.quality\" ) }","title":"Installation"},{"location":"plugins/quality/#usage","text":"Read the corresponding quality plugin documentation listed under features.","title":"Usage"},{"location":"plugins/quality/CHANGELOG/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning . Unreleased \u00b6 See changeset 0.2.0 \u00b6 See changeset Bumped \u00b6 Gradle Convention Plugin 0.1.0 -> 0.2.0 Code Analysis Plugin 0.1.1 -> 0.2.0 Formatter Plugin 0.1.1 -> 0.2.0 Report Plugin 0.1.1 -> 0.2.0 Composite Delegator 0.1.0 -> 0.2.0 0.1.2 \u00b6 See changeset Bumped \u00b6 Code Analysis Plugin 0.1.0 -> 0.1.1 Formatter Plugin 0.1.0 -> 0.1.1 Gradle Convention Plugin 0.0.7 -> 0.1.0 Report Plugin 0.1.0 -> 0.1.1 0.1.1 \u00b6 See changeset Bumped \u00b6 Report Plugin 0.1.0 -> 0.1.1 0.1.0 \u00b6 Initial release Quality Collection Plugin - a collection of all quality plugins.","title":"Changelog"},{"location":"plugins/quality/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning .","title":"Changelog"},{"location":"plugins/quality/CHANGELOG/#unreleased","text":"See changeset","title":"Unreleased"},{"location":"plugins/quality/CHANGELOG/#020","text":"See changeset","title":"0.2.0"},{"location":"plugins/quality/CHANGELOG/#bumped","text":"Gradle Convention Plugin 0.1.0 -> 0.2.0 Code Analysis Plugin 0.1.1 -> 0.2.0 Formatter Plugin 0.1.1 -> 0.2.0 Report Plugin 0.1.1 -> 0.2.0 Composite Delegator 0.1.0 -> 0.2.0","title":"Bumped"},{"location":"plugins/quality/CHANGELOG/#012","text":"See changeset","title":"0.1.2"},{"location":"plugins/quality/CHANGELOG/#bumped_1","text":"Code Analysis Plugin 0.1.0 -> 0.1.1 Formatter Plugin 0.1.0 -> 0.1.1 Gradle Convention Plugin 0.0.7 -> 0.1.0 Report Plugin 0.1.0 -> 0.1.1","title":"Bumped"},{"location":"plugins/quality/CHANGELOG/#011","text":"See changeset","title":"0.1.1"},{"location":"plugins/quality/CHANGELOG/#bumped_2","text":"Report Plugin 0.1.0 -> 0.1.1","title":"Bumped"},{"location":"plugins/quality/CHANGELOG/#010","text":"Initial release Quality Collection Plugin - a collection of all quality plugins.","title":"0.1.0"},{"location":"plugins/quality/code-analysis/","text":"Code Analysis Plugin \u00b6 The plugin helps to analyse code of your project and warns about issues. It makes use of the detekt plugin . Features \u00b6 As this plugin wraps detekt, it offers the same features for project configuration. Installation \u00b6 Add the following to your project root build.gradle/build.gradle.kts file: plugins { id ( \"eu.bitfunk.gradle.plugin.quality.code.analysis\" ) } Usage \u00b6 To check source code: ./gradlew detekt For applying initial configuration ./gradlew detektGenerateConfig For setting a baseline ./gradlew detektBaseline","title":"Code Analysis Plugin"},{"location":"plugins/quality/code-analysis/#code-analysis-plugin","text":"The plugin helps to analyse code of your project and warns about issues. It makes use of the detekt plugin .","title":"Code Analysis Plugin"},{"location":"plugins/quality/code-analysis/#features","text":"As this plugin wraps detekt, it offers the same features for project configuration.","title":"Features"},{"location":"plugins/quality/code-analysis/#installation","text":"Add the following to your project root build.gradle/build.gradle.kts file: plugins { id ( \"eu.bitfunk.gradle.plugin.quality.code.analysis\" ) }","title":"Installation"},{"location":"plugins/quality/code-analysis/#usage","text":"To check source code: ./gradlew detekt For applying initial configuration ./gradlew detektGenerateConfig For setting a baseline ./gradlew detektBaseline","title":"Usage"},{"location":"plugins/quality/code-analysis/CHANGELOG/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning . Unreleased \u00b6 See changeset 0.2.0 \u00b6 See changeset Bumped \u00b6 Version Catalog Accessor 0.1.0 -> 0.2.0 Gradle Plugin Convention 0.1.0 -> 0.2.1 0.1.1 \u00b6 See changeset Bumped \u00b6 Detekt 1.21.0 -> 1.22.0 Gradle Plugin Convention 0.0.7 -> 0.1.0 0.1.0 \u00b6 Initial release Quality Code Analysis Plugin - a source code analysis using detekt.","title":"Changelog"},{"location":"plugins/quality/code-analysis/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning .","title":"Changelog"},{"location":"plugins/quality/code-analysis/CHANGELOG/#unreleased","text":"See changeset","title":"Unreleased"},{"location":"plugins/quality/code-analysis/CHANGELOG/#020","text":"See changeset","title":"0.2.0"},{"location":"plugins/quality/code-analysis/CHANGELOG/#bumped","text":"Version Catalog Accessor 0.1.0 -> 0.2.0 Gradle Plugin Convention 0.1.0 -> 0.2.1","title":"Bumped"},{"location":"plugins/quality/code-analysis/CHANGELOG/#011","text":"See changeset","title":"0.1.1"},{"location":"plugins/quality/code-analysis/CHANGELOG/#bumped_1","text":"Detekt 1.21.0 -> 1.22.0 Gradle Plugin Convention 0.0.7 -> 0.1.0","title":"Bumped"},{"location":"plugins/quality/code-analysis/CHANGELOG/#010","text":"Initial release Quality Code Analysis Plugin - a source code analysis using detekt.","title":"0.1.0"},{"location":"plugins/quality/formatter/","text":"Formatter Plugin \u00b6 The plugin helps to format source code of your project and warns about issues. It makes use of the spotless plugin and applies bitfunk flavoured default configuration. Features \u00b6 As this plugin wraps spotless, it offers the same features with bitfunk project configuration. For kotlin it's using ktlint and Markdown is using prettier . Supported source files: Kotlin (.kt) Kotlin Gradle (.kts) Markdown (.md) Installation \u00b6 Add the following to your project root build.gradle/build.gradle.kts file: plugins { id ( \"eu.bitfunk.gradle.plugin.quality.formatter\" ) } Usage \u00b6 To check source code formatting ./gradlew spotlessCheck For applying source code formatting ./gradlew spotlessApply","title":"Formatter Plugin"},{"location":"plugins/quality/formatter/#formatter-plugin","text":"The plugin helps to format source code of your project and warns about issues. It makes use of the spotless plugin and applies bitfunk flavoured default configuration.","title":"Formatter Plugin"},{"location":"plugins/quality/formatter/#features","text":"As this plugin wraps spotless, it offers the same features with bitfunk project configuration. For kotlin it's using ktlint and Markdown is using prettier . Supported source files: Kotlin (.kt) Kotlin Gradle (.kts) Markdown (.md)","title":"Features"},{"location":"plugins/quality/formatter/#installation","text":"Add the following to your project root build.gradle/build.gradle.kts file: plugins { id ( \"eu.bitfunk.gradle.plugin.quality.formatter\" ) }","title":"Installation"},{"location":"plugins/quality/formatter/#usage","text":"To check source code formatting ./gradlew spotlessCheck For applying source code formatting ./gradlew spotlessApply","title":"Usage"},{"location":"plugins/quality/formatter/CHANGELOG/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning . Unreleased \u00b6 See changeset Bumped \u00b6 Spotless 6.15.0 -> 6.16.0 0.2.0 \u00b6 See changeset Removed \u00b6 Remove unnecessary rules for .kt , .kts and .md files as ktlint and prettier apply them already Bumped \u00b6 Gradle Plugin Convention 0.1.0 -> 0.2.0 ktlint 0.48.0 -> 0.48.2 Spotless 6.12.0 -> 6.15.0 0.1.1 \u00b6 See changeset Fixed \u00b6 Fix Kotlin Gradle files falsely included from build folder Bumped \u00b6 Spotless 6.11.0 -> 6.12.0 ktlint 0.47.1 -> 0.48.0 Gradle Plugin Convention 0.0.7 -> 0.1.0 0.1.0 \u00b6 Initial release Quality Formatter Plugin - a source code formatter using Spotless and ktlint.","title":"Changelog"},{"location":"plugins/quality/formatter/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning .","title":"Changelog"},{"location":"plugins/quality/formatter/CHANGELOG/#unreleased","text":"See changeset","title":"Unreleased"},{"location":"plugins/quality/formatter/CHANGELOG/#bumped","text":"Spotless 6.15.0 -> 6.16.0","title":"Bumped"},{"location":"plugins/quality/formatter/CHANGELOG/#020","text":"See changeset","title":"0.2.0"},{"location":"plugins/quality/formatter/CHANGELOG/#removed","text":"Remove unnecessary rules for .kt , .kts and .md files as ktlint and prettier apply them already","title":"Removed"},{"location":"plugins/quality/formatter/CHANGELOG/#bumped_1","text":"Gradle Plugin Convention 0.1.0 -> 0.2.0 ktlint 0.48.0 -> 0.48.2 Spotless 6.12.0 -> 6.15.0","title":"Bumped"},{"location":"plugins/quality/formatter/CHANGELOG/#011","text":"See changeset","title":"0.1.1"},{"location":"plugins/quality/formatter/CHANGELOG/#fixed","text":"Fix Kotlin Gradle files falsely included from build folder","title":"Fixed"},{"location":"plugins/quality/formatter/CHANGELOG/#bumped_2","text":"Spotless 6.11.0 -> 6.12.0 ktlint 0.47.1 -> 0.48.0 Gradle Plugin Convention 0.0.7 -> 0.1.0","title":"Bumped"},{"location":"plugins/quality/formatter/CHANGELOG/#010","text":"Initial release Quality Formatter Plugin - a source code formatter using Spotless and ktlint.","title":"0.1.0"},{"location":"plugins/quality/report/","text":"Report Plugin \u00b6 The plugin configures sonarqube scanner to report code metrics to sonarcloud.io . It makes use of the SonarScanner for Gradle and applies default configuration. Features \u00b6 This plugin wraps the sonar scanner Gradle plugin and applies some configuration. It also collects project sourceFiles for the report. This works for subprojects and included builds. It also copies code coverage reports to the right location for the scanner plugin. Installation \u00b6 Add the following to your project root build.gradle/build.gradle.kts file: plugins { id ( \"eu.bitfunk.gradle.plugin.quality.report\" ) } The plugin needs some configuration: sonarProjectKey : Sonar key used to identify the project. sonarOrganization : Sonar organisation name the project belongs to. coverageReportSourceDirs : List of directories in which the jacoco coverage report XML file could be found. Default: buildDir/reports/jacoco/testCodeCoverageReport reportConfig { sonarProjectKey . set ( \"sonar project key\" ) sonarOrganization . set ( \"sonar organization name\" ) coverageReportSourceDirs . set ( listOf ( \"buildDir/reports/jacoco/testCodeCoverageReport\" )) // Optional } Usage \u00b6 To run the report generation and upload to sonarcloud.io: ./gradlew sonarqube You need to provide a SONAR_TOKEN from sonarcloud.io to be able to upload reports.","title":"Report Plugin"},{"location":"plugins/quality/report/#report-plugin","text":"The plugin configures sonarqube scanner to report code metrics to sonarcloud.io . It makes use of the SonarScanner for Gradle and applies default configuration.","title":"Report Plugin"},{"location":"plugins/quality/report/#features","text":"This plugin wraps the sonar scanner Gradle plugin and applies some configuration. It also collects project sourceFiles for the report. This works for subprojects and included builds. It also copies code coverage reports to the right location for the scanner plugin.","title":"Features"},{"location":"plugins/quality/report/#installation","text":"Add the following to your project root build.gradle/build.gradle.kts file: plugins { id ( \"eu.bitfunk.gradle.plugin.quality.report\" ) } The plugin needs some configuration: sonarProjectKey : Sonar key used to identify the project. sonarOrganization : Sonar organisation name the project belongs to. coverageReportSourceDirs : List of directories in which the jacoco coverage report XML file could be found. Default: buildDir/reports/jacoco/testCodeCoverageReport reportConfig { sonarProjectKey . set ( \"sonar project key\" ) sonarOrganization . set ( \"sonar organization name\" ) coverageReportSourceDirs . set ( listOf ( \"buildDir/reports/jacoco/testCodeCoverageReport\" )) // Optional }","title":"Installation"},{"location":"plugins/quality/report/#usage","text":"To run the report generation and upload to sonarcloud.io: ./gradlew sonarqube You need to provide a SONAR_TOKEN from sonarcloud.io to be able to upload reports.","title":"Usage"},{"location":"plugins/quality/report/CHANGELOG/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning . Unreleased \u00b6 See changeset 0.2.0 \u00b6 See changeset Bumped \u00b6 Gradle Plugin Convention 0.1.0 -> 0.2.0 Sonarqube Gradle plugin 3.5.0.2730 -> 4.0.0.2929 0.1.1 \u00b6 See changeset Bumped \u00b6 Sonarqube Gradle plugin 3.4.0.2513 -> 3.5.0.2730 Gradle Plugin Convention 0.0.7 -> 0.1.0 0.1.0 \u00b6 Initial release Quality Report Plugin - a quality report plugin using sonarqube.","title":"Changelog"},{"location":"plugins/quality/report/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning .","title":"Changelog"},{"location":"plugins/quality/report/CHANGELOG/#unreleased","text":"See changeset","title":"Unreleased"},{"location":"plugins/quality/report/CHANGELOG/#020","text":"See changeset","title":"0.2.0"},{"location":"plugins/quality/report/CHANGELOG/#bumped","text":"Gradle Plugin Convention 0.1.0 -> 0.2.0 Sonarqube Gradle plugin 3.5.0.2730 -> 4.0.0.2929","title":"Bumped"},{"location":"plugins/quality/report/CHANGELOG/#011","text":"See changeset","title":"0.1.1"},{"location":"plugins/quality/report/CHANGELOG/#bumped_1","text":"Sonarqube Gradle plugin 3.4.0.2513 -> 3.5.0.2730 Gradle Plugin Convention 0.0.7 -> 0.1.0","title":"Bumped"},{"location":"plugins/quality/report/CHANGELOG/#010","text":"Initial release Quality Report Plugin - a quality report plugin using sonarqube.","title":"0.1.0"},{"location":"plugins/tool/composite-delegator/","text":"Composite Delegator Plugin \u00b6 A plugin that delegates gradle task execution to included builds. Features \u00b6 standard tasks are already added: assemble , build , check and test additional task could be configured Installation \u00b6 Add the following to your project module build.gradle/build.gradle.kts file: plugins { id ( \"eu.bitfunk.gradle.plugin.tool.composite.delegator\" ) } The plugin could delegate additional tasks to included builds: additionalTasks : List of task names that additionally should be delegated to included builds compositeDelegator { additionalTasks . set ( listOf ( \"exampleTask\" , \"otherExampleTask\" )) } Usage \u00b6 Ensure that your desired task is registered and call: ./gradlew exampleTask","title":"Composite Delegator Plugin"},{"location":"plugins/tool/composite-delegator/#composite-delegator-plugin","text":"A plugin that delegates gradle task execution to included builds.","title":"Composite Delegator Plugin"},{"location":"plugins/tool/composite-delegator/#features","text":"standard tasks are already added: assemble , build , check and test additional task could be configured","title":"Features"},{"location":"plugins/tool/composite-delegator/#installation","text":"Add the following to your project module build.gradle/build.gradle.kts file: plugins { id ( \"eu.bitfunk.gradle.plugin.tool.composite.delegator\" ) } The plugin could delegate additional tasks to included builds: additionalTasks : List of task names that additionally should be delegated to included builds compositeDelegator { additionalTasks . set ( listOf ( \"exampleTask\" , \"otherExampleTask\" )) }","title":"Installation"},{"location":"plugins/tool/composite-delegator/#usage","text":"Ensure that your desired task is registered and call: ./gradlew exampleTask","title":"Usage"},{"location":"plugins/tool/composite-delegator/CHANGELOG/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning . Unreleased \u00b6 See changeset 0.2.0 \u00b6 See changeset Bumped \u00b6 Gradle Plugin Convention 0.0.7 -> 0.2.0 0.1.0 \u00b6 Initial release Composite Delegator Plugin - a plugin that delegates gradle tasks execution to included builds.","title":"Changelog"},{"location":"plugins/tool/composite-delegator/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning .","title":"Changelog"},{"location":"plugins/tool/composite-delegator/CHANGELOG/#unreleased","text":"See changeset","title":"Unreleased"},{"location":"plugins/tool/composite-delegator/CHANGELOG/#020","text":"See changeset","title":"0.2.0"},{"location":"plugins/tool/composite-delegator/CHANGELOG/#bumped","text":"Gradle Plugin Convention 0.0.7 -> 0.2.0","title":"Bumped"},{"location":"plugins/tool/composite-delegator/CHANGELOG/#010","text":"Initial release Composite Delegator Plugin - a plugin that delegates gradle tasks execution to included builds.","title":"0.1.0"},{"location":"plugins/tool/git-version/","text":"Git Version Plugin \u00b6 A plugin to generate semantic version information from git tags and make them available for the project this plugin is applied to. Features \u00b6 This plugin mimics git describe --always and git describe --always --match VERSION_PREFIX to derive a version string. In case the repository state is dirty, a .dirty marker is appended to the version string. It adds: gitVersion - version code derived from a git tag gitVersionInfo - prints all information about the current version Installation \u00b6 Add the following to your project module build.gradle/build.gradle.kts file: plugins { id ( \"eu.bitfunk.gradle.plugin.tool.gitversion\" ) } The plugin works without configuration, assuming there is no prefix used for version tags. In case you want to use a prefixed version tag, cou could configure it to your needs: prefix : desired version tag prefix, that must comply with this regex [/@]?([A-Za-z]+[/@-])+ Default: empty gitVersionConfig { prefix . set ( \"my-prefix@\" ) } Usage \u00b6 To print current version information: ./gradlew printGitVersion ./gradlew printGitVersionInfo To access the git version information, use this project extensions: gitVersion() - git version as String gitVersionInfo() - git version information as String Acknowledgements \u00b6 This plugin started as a Kotlin rewrite of gradle-git-version - a Gradle plugin that uses git describe to produce a version string. During development it turned into its own plugin with adjusted functionality. If you need your version be based on git describe --tags --always --first-parent with first-parent behavior. Please use the gradle-git-version plugin instead.","title":"Git Version Plugin"},{"location":"plugins/tool/git-version/#git-version-plugin","text":"A plugin to generate semantic version information from git tags and make them available for the project this plugin is applied to.","title":"Git Version Plugin"},{"location":"plugins/tool/git-version/#features","text":"This plugin mimics git describe --always and git describe --always --match VERSION_PREFIX to derive a version string. In case the repository state is dirty, a .dirty marker is appended to the version string. It adds: gitVersion - version code derived from a git tag gitVersionInfo - prints all information about the current version","title":"Features"},{"location":"plugins/tool/git-version/#installation","text":"Add the following to your project module build.gradle/build.gradle.kts file: plugins { id ( \"eu.bitfunk.gradle.plugin.tool.gitversion\" ) } The plugin works without configuration, assuming there is no prefix used for version tags. In case you want to use a prefixed version tag, cou could configure it to your needs: prefix : desired version tag prefix, that must comply with this regex [/@]?([A-Za-z]+[/@-])+ Default: empty gitVersionConfig { prefix . set ( \"my-prefix@\" ) }","title":"Installation"},{"location":"plugins/tool/git-version/#usage","text":"To print current version information: ./gradlew printGitVersion ./gradlew printGitVersionInfo To access the git version information, use this project extensions: gitVersion() - git version as String gitVersionInfo() - git version information as String","title":"Usage"},{"location":"plugins/tool/git-version/#acknowledgements","text":"This plugin started as a Kotlin rewrite of gradle-git-version - a Gradle plugin that uses git describe to produce a version string. During development it turned into its own plugin with adjusted functionality. If you need your version be based on git describe --tags --always --first-parent with first-parent behavior. Please use the gradle-git-version plugin instead.","title":"Acknowledgements"},{"location":"plugins/tool/git-version/CHANGELOG/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning . Unreleased \u00b6 See changeset 0.2.0 \u00b6 See changeset Fixed \u00b6 Fix flaky git-version merge test Bumped \u00b6 Gradle Plugin Convention 0.0.7 -> 0.2.1 0.1.1 \u00b6 See changeset Fixed \u00b6 Fix issue that SemVer interprets some git hashes as semantic version Bumped \u00b6 SemVer 1.1.1 -> 1.2.0 jGit 6.3.0.202209071007-r -> 6.4.0.202211300538-r 0.1.0 \u00b6 Initial release Git Version Plugin - for easy project versioning using Git tags.","title":"Changelog"},{"location":"plugins/tool/git-version/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning .","title":"Changelog"},{"location":"plugins/tool/git-version/CHANGELOG/#unreleased","text":"See changeset","title":"Unreleased"},{"location":"plugins/tool/git-version/CHANGELOG/#020","text":"See changeset","title":"0.2.0"},{"location":"plugins/tool/git-version/CHANGELOG/#fixed","text":"Fix flaky git-version merge test","title":"Fixed"},{"location":"plugins/tool/git-version/CHANGELOG/#bumped","text":"Gradle Plugin Convention 0.0.7 -> 0.2.1","title":"Bumped"},{"location":"plugins/tool/git-version/CHANGELOG/#011","text":"See changeset","title":"0.1.1"},{"location":"plugins/tool/git-version/CHANGELOG/#fixed_1","text":"Fix issue that SemVer interprets some git hashes as semantic version","title":"Fixed"},{"location":"plugins/tool/git-version/CHANGELOG/#bumped_1","text":"SemVer 1.1.1 -> 1.2.0 jGit 6.3.0.202209071007-r -> 6.4.0.202211300538-r","title":"Bumped"},{"location":"plugins/tool/git-version/CHANGELOG/#010","text":"Initial release Git Version Plugin - for easy project versioning using Git tags.","title":"0.1.0"},{"location":"plugins/tool/publish/","text":"Publish Plugin \u00b6 A publish plugin for maven dependencies. Features \u00b6 TODO Installation \u00b6 Add the following to your project root build.gradle/build.gradle.kts file: plugins { id ( \"eu.bitfunk.gradle.plugin.tool.publish\" ) } Usage \u00b6 TODO","title":"Publish Plugin"},{"location":"plugins/tool/publish/#publish-plugin","text":"A publish plugin for maven dependencies.","title":"Publish Plugin"},{"location":"plugins/tool/publish/#features","text":"TODO","title":"Features"},{"location":"plugins/tool/publish/#installation","text":"Add the following to your project root build.gradle/build.gradle.kts file: plugins { id ( \"eu.bitfunk.gradle.plugin.tool.publish\" ) }","title":"Installation"},{"location":"plugins/tool/publish/#usage","text":"TODO","title":"Usage"},{"location":"plugins/tool/publish/CHANGELOG/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning . Unreleased \u00b6 See changeset Bumped \u00b6 Gradle Plugin Convention 0.1.0 -> 0.2.1 Add Publish Plugin - a publish plugin for maven dependencies","title":"Changelog"},{"location":"plugins/tool/publish/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning .","title":"Changelog"},{"location":"plugins/tool/publish/CHANGELOG/#unreleased","text":"See changeset","title":"Unreleased"},{"location":"plugins/tool/publish/CHANGELOG/#bumped","text":"Gradle Plugin Convention 0.1.0 -> 0.2.1 Add Publish Plugin - a publish plugin for maven dependencies","title":"Bumped"},{"location":"plugins/tool/versioning/","text":"Versioning Plugin \u00b6 A plugin to generate semantic version information and apply it to the project based on git tags. It makes use of the git-version plugin . Features \u00b6 As this plugin wraps git-version, it offers the same features for versioning. Additionally it adds: versionCode - version code for Android based on semantic versioning (MMmmPP) featureVersionCode - version code for Android based on timestamps (MMddHHmm) versionInfo - prints all information about the current version Installation \u00b6 Add the following to your project module build.gradle/build.gradle.kts file: plugins { id ( \"eu.bitfunk.gradle.plugin.tool.versioning\" ) } Usage \u00b6 To print current version information: ./gradlew versionInfo To access the version information, use this project extensions: version() - version as String versionCleaned - version where -SNAPSHOT got removed versionCode() - versionCode as Int versionCodeFeature() - versionCodeFeature as Int","title":"Versioning Plugin"},{"location":"plugins/tool/versioning/#versioning-plugin","text":"A plugin to generate semantic version information and apply it to the project based on git tags. It makes use of the git-version plugin .","title":"Versioning Plugin"},{"location":"plugins/tool/versioning/#features","text":"As this plugin wraps git-version, it offers the same features for versioning. Additionally it adds: versionCode - version code for Android based on semantic versioning (MMmmPP) featureVersionCode - version code for Android based on timestamps (MMddHHmm) versionInfo - prints all information about the current version","title":"Features"},{"location":"plugins/tool/versioning/#installation","text":"Add the following to your project module build.gradle/build.gradle.kts file: plugins { id ( \"eu.bitfunk.gradle.plugin.tool.versioning\" ) }","title":"Installation"},{"location":"plugins/tool/versioning/#usage","text":"To print current version information: ./gradlew versionInfo To access the version information, use this project extensions: version() - version as String versionCleaned - version where -SNAPSHOT got removed versionCode() - versionCode as Int versionCodeFeature() - versionCodeFeature as Int","title":"Usage"},{"location":"plugins/tool/versioning/CHANGELOG/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning . Unreleased \u00b6 See changeset 0.2.0 \u00b6 See changeset Bumped \u00b6 Git Version 0.1.1 -> 0.2.0 Gradle Plugin Convention 0.1.0 -> 0.2.1 0.1.2 \u00b6 See changeset Bumped \u00b6 Git Version 0.1.0-SNAPSHOT -> 0.1.1 Gradle Plugin Convention 0.0.7 -> 0.1.0 0.1.1 \u00b6 See changeset Fixed \u00b6 wrong cleanedVersion for feature versions 0.1.0 \u00b6 Initial release Gradle Versioning Plugin - for easy project versioning using Git tags.","title":"Changelog"},{"location":"plugins/tool/versioning/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on keep a changelog and using following types of changes: Added , Changed , Deprecated , Removed , Fixed , Security , Bumped and Migration . This project adheres to semantic versioning .","title":"Changelog"},{"location":"plugins/tool/versioning/CHANGELOG/#unreleased","text":"See changeset","title":"Unreleased"},{"location":"plugins/tool/versioning/CHANGELOG/#020","text":"See changeset","title":"0.2.0"},{"location":"plugins/tool/versioning/CHANGELOG/#bumped","text":"Git Version 0.1.1 -> 0.2.0 Gradle Plugin Convention 0.1.0 -> 0.2.1","title":"Bumped"},{"location":"plugins/tool/versioning/CHANGELOG/#012","text":"See changeset","title":"0.1.2"},{"location":"plugins/tool/versioning/CHANGELOG/#bumped_1","text":"Git Version 0.1.0-SNAPSHOT -> 0.1.1 Gradle Plugin Convention 0.0.7 -> 0.1.0","title":"Bumped"},{"location":"plugins/tool/versioning/CHANGELOG/#011","text":"See changeset","title":"0.1.1"},{"location":"plugins/tool/versioning/CHANGELOG/#fixed","text":"wrong cleanedVersion for feature versions","title":"Fixed"},{"location":"plugins/tool/versioning/CHANGELOG/#010","text":"Initial release Gradle Versioning Plugin - for easy project versioning using Git tags.","title":"0.1.0"}]}